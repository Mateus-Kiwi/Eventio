{"ast":null,"code":"import*as React from'react';import Keyboard from\"react-native-web/dist/exports/Keyboard\";import TextInput from\"react-native-web/dist/exports/TextInput\";export default function useKeyboardManager(isEnabled){var previouslyFocusedTextInputRef=React.useRef(undefined);var startTimestampRef=React.useRef(0);var keyboardTimeoutRef=React.useRef();var clearKeyboardTimeout=React.useCallback(function(){if(keyboardTimeoutRef.current!==undefined){clearTimeout(keyboardTimeoutRef.current);keyboardTimeoutRef.current=undefined;}},[]);var onPageChangeStart=React.useCallback(function(){if(!isEnabled()){return;}clearKeyboardTimeout();var input=TextInput.State.currentlyFocusedInput();input===null||input===void 0?void 0:input.blur();previouslyFocusedTextInputRef.current=input;startTimestampRef.current=Date.now();},[clearKeyboardTimeout,isEnabled]);var onPageChangeConfirm=React.useCallback(function(force){if(!isEnabled()){return;}clearKeyboardTimeout();if(force){Keyboard.dismiss();}else{var input=previouslyFocusedTextInputRef.current;input===null||input===void 0?void 0:input.blur();}previouslyFocusedTextInputRef.current=undefined;},[clearKeyboardTimeout,isEnabled]);var onPageChangeCancel=React.useCallback(function(){if(!isEnabled()){return;}clearKeyboardTimeout();var input=previouslyFocusedTextInputRef.current;if(input){if(Date.now()-startTimestampRef.current<100){keyboardTimeoutRef.current=setTimeout(function(){input===null||input===void 0?void 0:input.focus();previouslyFocusedTextInputRef.current=undefined;},100);}else{input===null||input===void 0?void 0:input.focus();previouslyFocusedTextInputRef.current=undefined;}}},[clearKeyboardTimeout,isEnabled]);React.useEffect(function(){return function(){return clearKeyboardTimeout();};},[clearKeyboardTimeout]);return{onPageChangeStart:onPageChangeStart,onPageChangeConfirm:onPageChangeConfirm,onPageChangeCancel:onPageChangeCancel};}","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,C,4HAKA,cAAe,SAASC,mBAAT,CAA4BC,SAA5B,CAAsD,CAGnE,GAAMC,8BAA6B,CAAGH,KAAK,CAACI,MAANJ,CAAuBK,SAAvBL,CAAtC,CACA,GAAMM,kBAAiB,CAAGN,KAAK,CAACI,MAANJ,CAAqB,CAArBA,CAA1B,CACA,GAAMO,mBAAkB,CAAGP,KAAK,CAACI,MAANJ,EAA3B,CAEA,GAAMQ,qBAAoB,CAAGR,KAAK,CAACS,WAANT,CAAkB,UAAM,CACnD,GAAIO,kBAAkB,CAACG,OAAnBH,GAA+BF,SAAnC,CAA8C,CAC5CM,YAAY,CAACJ,kBAAkB,CAACG,OAApB,CAAZC,CACAJ,kBAAkB,CAACG,OAAnBH,CAA6BF,SAA7BE,CACD,CAJ0B,EAK1B,EAL0BP,CAA7B,CAOA,GAAMY,kBAAiB,CAAGZ,KAAK,CAACS,WAANT,CAAkB,UAAM,CAChD,GAAI,CAACE,SAAS,EAAd,CAAkB,CAChB,OACD,CAEDM,oBAAoB,GAEpB,GAAMK,MAAe,CAAGC,SAAS,CAACC,KAAVD,CAAgBE,qBAAhBF,EAAxB,CAGAD,KAAK,OAALA,OAAK,SAALA,aAAK,CAAEI,IAAPJ,GAGAV,6BAA6B,CAACO,OAA9BP,CAAwCU,KAAxCV,CAGAG,iBAAiB,CAACI,OAAlBJ,CAA4BY,IAAI,CAACC,GAALD,EAA5BZ,CAhBwB,EAiBvB,CAACE,oBAAD,CAAuBN,SAAvB,CAjBuBF,CAA1B,CAmBA,GAAMoB,oBAAmB,CAAGpB,KAAK,CAACS,WAANT,CACzBqB,cAAD,CAAoB,CAClB,GAAI,CAACnB,SAAS,EAAd,CAAkB,CAChB,OACD,CAEDM,oBAAoB,GAEpB,GAAIa,KAAJ,CAAW,CAITC,QAAQ,CAACC,OAATD,GAJF,KAKO,CACL,GAAMT,MAAK,CAAGV,6BAA6B,CAACO,OAA5C,CAIAG,KAAK,OAALA,OAAK,SAALA,aAAK,CAAEI,IAAPJ,GAjBgB,CAqBlBV,6BAA6B,CAACO,OAA9BP,CAAwCE,SAAxCF,CAtBwB,EAwB1B,CAACK,oBAAD,CAAuBN,SAAvB,CAxB0BF,CAA5B,CA2BA,GAAMwB,mBAAkB,CAAGxB,KAAK,CAACS,WAANT,CAAkB,UAAM,CACjD,GAAI,CAACE,SAAS,EAAd,CAAkB,CAChB,OACD,CAEDM,oBAAoB,GAGpB,GAAMK,MAAK,CAAGV,6BAA6B,CAACO,OAA5C,CAEA,GAAIG,KAAJ,CAAW,CAQT,GAAIK,IAAI,CAACC,GAALD,GAAaZ,iBAAiB,CAACI,OAA/BQ,CAAyC,GAA7C,CAAkD,CAChDX,kBAAkB,CAACG,OAAnBH,CAA6BkB,UAAU,CAAC,UAAM,CAC5CZ,KAAK,OAALA,OAAK,SAALA,aAAK,CAAEa,KAAPb,GACAV,6BAA6B,CAACO,OAA9BP,CAAwCE,SAAxCF,CAFqC,EAGpC,GAHoC,CAAvCI,CADF,KAKO,CACLM,KAAK,OAALA,OAAK,SAALA,aAAK,CAAEa,KAAPb,GACAV,6BAA6B,CAACO,OAA9BP,CAAwCE,SAAxCF,CACD,CACF,CA3BwB,EA4BxB,CAACK,oBAAD,CAAuBN,SAAvB,CA5BwBF,CAA3B,CA8BAA,KAAK,CAAC2B,SAAN3B,CAAgB,UAAM,CACpB,MAAO,kBAAMQ,qBAAoB,EAA1B,EAAP,CADF,EAEG,CAACA,oBAAD,CAFHR,EAIA,MAAO,CACLY,iBADK,CACLA,iBADK,CAELQ,mBAFK,CAELA,mBAFK,CAGLI,qCAHK,CAAP,CAKD","names":["React","useKeyboardManager","isEnabled","previouslyFocusedTextInputRef","useRef","undefined","startTimestampRef","keyboardTimeoutRef","clearKeyboardTimeout","useCallback","current","clearTimeout","onPageChangeStart","input","TextInput","State","currentlyFocusedInput","blur","Date","now","onPageChangeConfirm","force","Keyboard","dismiss","onPageChangeCancel","setTimeout","focus","useEffect"],"sources":["useKeyboardManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HostComponent, Keyboard, TextInput } from 'react-native';\n\ntype InputRef = React.ElementRef<HostComponent<unknown>> | undefined;\n\nexport default function useKeyboardManager(isEnabled: () => boolean) {\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  const previouslyFocusedTextInputRef = React.useRef<InputRef>(undefined);\n  const startTimestampRef = React.useRef<number>(0);\n  const keyboardTimeoutRef = React.useRef<any>();\n\n  const clearKeyboardTimeout = React.useCallback(() => {\n    if (keyboardTimeoutRef.current !== undefined) {\n      clearTimeout(keyboardTimeoutRef.current);\n      keyboardTimeoutRef.current = undefined;\n    }\n  }, []);\n\n  const onPageChangeStart = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    const input: InputRef = TextInput.State.currentlyFocusedInput();\n\n    // When a page change begins, blur the currently focused input\n    input?.blur();\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    previouslyFocusedTextInputRef.current = input;\n\n    // Store timestamp for touch start\n    startTimestampRef.current = Date.now();\n  }, [clearKeyboardTimeout, isEnabled]);\n\n  const onPageChangeConfirm = React.useCallback(\n    (force: boolean) => {\n      if (!isEnabled()) {\n        return;\n      }\n\n      clearKeyboardTimeout();\n\n      if (force) {\n        // Always dismiss input, even if we don't have a ref to it\n        // We might not have the ref if onPageChangeStart was never called\n        // This can happen if page change was not from a gesture\n        Keyboard.dismiss();\n      } else {\n        const input = previouslyFocusedTextInputRef.current;\n\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        input?.blur();\n      }\n\n      // Cleanup the ID on successful page change\n      previouslyFocusedTextInputRef.current = undefined;\n    },\n    [clearKeyboardTimeout, isEnabled]\n  );\n\n  const onPageChangeCancel = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = previouslyFocusedTextInputRef.current;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - startTimestampRef.current < 100) {\n        keyboardTimeoutRef.current = setTimeout(() => {\n          input?.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }, 100);\n      } else {\n        input?.focus();\n        previouslyFocusedTextInputRef.current = undefined;\n      }\n    }\n  }, [clearKeyboardTimeout, isEnabled]);\n\n  React.useEffect(() => {\n    return () => clearKeyboardTimeout();\n  }, [clearKeyboardTimeout]);\n\n  return {\n    onPageChangeStart,\n    onPageChangeConfirm,\n    onPageChangeCancel,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}