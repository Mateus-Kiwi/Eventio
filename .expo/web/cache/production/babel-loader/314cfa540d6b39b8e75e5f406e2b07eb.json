{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useTheme}from'@react-navigation/native';import*as React from'react';import StatusBar from\"react-native-web/dist/exports/StatusBar\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";export default function ModalStatusBarManager(_ref){var _flattenedStyle$trans,_flattenedStyle$trans2;var dark=_ref.dark,layout=_ref.layout,insets=_ref.insets,style=_ref.style;var _useTheme=useTheme(),darkTheme=_useTheme.dark;var _React$useState=React.useState(true),_React$useState2=_slicedToArray(_React$useState,2),overlapping=_React$useState2[0],setOverlapping=_React$useState2[1];var scale=1-20/layout.width;var offset=(insets.top-34)*scale;var flattenedStyle=StyleSheet.flatten(style);var translateY=flattenedStyle===null||flattenedStyle===void 0?void 0:(_flattenedStyle$trans=flattenedStyle.transform)===null||_flattenedStyle$trans===void 0?void 0:(_flattenedStyle$trans2=_flattenedStyle$trans.find(function(s){return s.translateY!==undefined;}))===null||_flattenedStyle$trans2===void 0?void 0:_flattenedStyle$trans2.translateY;React.useEffect(function(){var listener=function listener(_ref2){var value=_ref2.value;setOverlapping(value<offset);};var sub=translateY===null||translateY===void 0?void 0:translateY.addListener(listener);return function(){return translateY===null||translateY===void 0?void 0:translateY.removeListener(sub);};},[offset,translateY]);var darkContent=dark!==null&&dark!==void 0?dark:!darkTheme;return React.createElement(StatusBar,{animated:true,barStyle:overlapping&&darkContent?'dark-content':'light-content'});}","map":{"version":3,"mappings":"iEAAA,OAASA,QAAT,KAAyB,0BAAzB,CACA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,C,gIAaA,cAAe,SAASC,sBAAT,MAKL,qDAJRC,KAIQ,MAJRA,IAIQ,CAHRC,MAGQ,MAHRA,MAGQ,CAFRC,MAEQ,MAFRA,MAEQ,CADRC,KACQ,MADRA,KACQ,CACR,cAA4BN,QAAQ,EAApC,CAAcO,SAAd,WAAQJ,IAAR,CACA,oBAAsCF,KAAK,CAACO,QAANP,CAAe,IAAfA,CAAtC,oDAAOQ,WAAP,qBAAoBC,cAApB,qBAEA,GAAMC,MAAK,CAAG,EAAI,GAAKP,MAAM,CAACQ,KAA9B,CACA,GAAMC,OAAM,CAAG,CAACR,MAAM,CAACS,GAAPT,CAAa,EAAd,EAAoBM,KAAnC,CAEA,GAAMI,eAAc,CAAGC,UAAU,CAACC,OAAXD,CAAmBV,KAAnBU,CAAvB,CACA,GAAME,WAAU,CAAGH,cAAH,OAAGA,gBAAH,SAAGA,CAAH,MAAGA,CAAH,uBAAGA,cAAc,CAAEI,SAAnB,wEAAGC,sBAA2BC,IAA3B,CAChBC,UAAD,QAAYA,EAAC,CAACJ,UAAFI,GAAiBC,SAA7B,EADiB,CAAH,iDAAGC,uBAEhBN,UAFH,CAIAjB,KAAK,CAACwB,SAANxB,CAAgB,UAAM,CACpB,GAAMyB,SAAQ,CAAG,QAAXA,SAAW,OAAkC,IAA/BC,MAA+B,OAA/BA,KAA+B,CACjDjB,cAAc,CAACiB,KAAK,CAAGd,MAAT,CAAdH,CADF,EAIA,GAAMkB,IAAG,CAAGV,UAAH,OAAGA,YAAH,SAAGA,CAAH,MAAGA,WAAU,CAAEW,WAAZX,CAAwBQ,QAAxBR,CAAZ,CAEA,MAAO,kBAAMA,WAAN,OAAMA,YAAN,SAAMA,CAAN,MAAMA,WAAU,CAAEY,cAAZZ,CAA2BU,GAA3BV,CAAN,EAAP,CAPF,EAQG,CAACL,MAAD,CAASK,UAAT,CARHjB,EAUA,GAAM8B,YAAW,CAAG5B,IAAH,OAAGA,MAAH,SAAGA,MAAQ,CAACI,SAA7B,CAEA,MACEN,qBAAC+B,SAAD,EACEC,QAAQ,KADV,CAEEC,QAAQ,CAAEzB,WAAW,EAAIsB,WAAftB,CAA6B,cAA7BA,CAA8C,eAF1D,EADF,CAMD","names":["useTheme","React","ModalStatusBarManager","dark","layout","insets","style","darkTheme","useState","overlapping","setOverlapping","scale","width","offset","top","flattenedStyle","StyleSheet","flatten","translateY","transform","_flattenedStyle$trans","find","s","undefined","_flattenedStyle$trans2","useEffect","listener","value","sub","addListener","removeListener","darkContent","StatusBar","animated","barStyle"],"sources":["ModalStatusBarManager.tsx"],"sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type { Layout } from '../types';\n\ntype Props = {\n  dark: boolean | undefined;\n  layout: Layout;\n  insets: EdgeInsets;\n  style: any;\n};\n\nexport default function ModalStatusBarManager({\n  dark,\n  layout,\n  insets,\n  style,\n}: Props) {\n  const { dark: darkTheme } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle?.transform?.find(\n    (s: any) => s.translateY !== undefined\n  )?.translateY;\n\n  React.useEffect(() => {\n    const listener = ({ value }: { value: number }) => {\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY?.addListener(listener);\n\n    return () => translateY?.removeListener(sub);\n  }, [offset, translateY]);\n\n  const darkContent = dark ?? !darkTheme;\n\n  return (\n    <StatusBar\n      animated\n      barStyle={overlapping && darkContent ? 'dark-content' : 'light-content'}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}