{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { State } from \"../../State\";\nimport { EventTypes } from \"../interfaces\";\nimport GestureHandler from \"./GestureHandler\";\nvar DEFAULT_MAX_DURATION_MS = 500;\nvar DEFAULT_MAX_DELAY_MS = 200;\nvar DEFAULT_NUMBER_OF_TAPS = 1;\nvar DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\n\nvar TapGestureHandler = function (_GestureHandler) {\n  _inherits(TapGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(TapGestureHandler);\n\n  function TapGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, TapGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDeltaX\", Number.MIN_SAFE_INTEGER);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDeltaY\", Number.MIN_SAFE_INTEGER);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDistSq\", Number.MIN_SAFE_INTEGER);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDurationMs\", DEFAULT_MAX_DURATION_MS);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDelayMs\", DEFAULT_MAX_DELAY_MS);\n\n    _defineProperty(_assertThisInitialized(_this), \"numberOfTaps\", DEFAULT_NUMBER_OF_TAPS);\n\n    _defineProperty(_assertThisInitialized(_this), \"minNumberOfPointers\", DEFAULT_MIN_NUMBER_OF_POINTERS);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentMaxNumberOfPointers\", 1);\n\n    _defineProperty(_assertThisInitialized(_this), \"startX\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"startY\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"offsetY\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastX\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastY\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"waitTimeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"delayTimeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"tapsSoFar\", 0);\n\n    return _this;\n  }\n\n  _createClass(TapGestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"init\", this).call(this, ref, propsRef);\n\n      this.setShouldCancelWhenOutside(true);\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n          enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        enabled: enabled\n      }, props));\n\n      this.enabled = enabled;\n\n      if (this.config.numberOfTaps !== undefined) {\n        this.numberOfTaps = this.config.numberOfTaps;\n      }\n\n      if (this.config.maxDurationMs !== undefined) {\n        this.maxDurationMs = this.config.maxDurationMs;\n      }\n\n      if (this.config.maxDelayMs !== undefined) {\n        this.maxDelayMs = this.config.maxDelayMs;\n      }\n\n      if (this.config.maxDeltaX !== undefined) {\n        this.maxDeltaX = this.config.maxDeltaX;\n      }\n\n      if (this.config.maxDeltaY !== undefined) {\n        this.maxDeltaY = this.config.maxDeltaY;\n      }\n\n      if (this.config.maxDistSq !== undefined) {\n        this.maxDistSq = this.config.maxDistSq;\n      }\n\n      if (this.config.minPointers !== undefined) {\n        this.minNumberOfPointers = this.config.minPointers;\n      }\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"resetConfig\", this).call(this);\n\n      this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n      this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n      this.maxDistSq = Number.MIN_SAFE_INTEGER;\n      this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n      this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n      this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n      this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(event) {\n      return {\n        x: event.offsetX,\n        y: event.offsetY,\n        absoluteX: event.x,\n        absoluteY: event.y\n      };\n    }\n  }, {\n    key: \"clearTimeouts\",\n    value: function clearTimeouts() {\n      clearTimeout(this.waitTimeout);\n      clearTimeout(this.delayTimeout);\n    }\n  }, {\n    key: \"startTap\",\n    value: function startTap(event) {\n      var _this2 = this;\n\n      this.clearTimeouts();\n      this.waitTimeout = setTimeout(function () {\n        return _this2.fail(event);\n      }, this.maxDurationMs);\n    }\n  }, {\n    key: \"endTap\",\n    value: function endTap(event) {\n      var _this3 = this;\n\n      this.clearTimeouts();\n\n      if (++this.tapsSoFar === this.numberOfTaps && this.currentMaxNumberOfPointers >= this.minNumberOfPointers) {\n        this.activate(event);\n      } else {\n        this.delayTimeout = setTimeout(function () {\n          return _this3.fail(event);\n        }, this.maxDelayMs);\n      }\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onPointerDown\", this).call(this, event);\n\n      this.tracker.addToTracker(event);\n      this.trySettingPosition(event);\n\n      if (this.tracker.getTrackedPointersCount() > 1) {\n        this.onPointerAdd(event);\n      } else {\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n      }\n\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(_event) {\n      this.offsetX += this.lastX - this.startX;\n      this.offsetY += this.lastY = this.startY;\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.startX = this.lastX;\n      this.startY = this.lastY;\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      if (this.tracker.getTrackedPointersCount() > 1) {\n        this.tracker.removeFromTracker(event.pointerId);\n        this.onPointerRemove(event);\n      } else {\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.tracker.removeFromTracker(event.pointerId);\n      }\n\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(_event) {\n      this.offsetX += this.lastX - this.startX;\n      this.offsetY += this.lastY = this.startY;\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.startX = this.lastX;\n      this.startY = this.lastY;\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.trySettingPosition(event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      this.trySettingPosition(event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      this.tracker.resetTracker();\n      this.fail(event);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(event) {\n      if (this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()) {\n        this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n      }\n\n      if (this.shouldFail()) {\n        this.fail(event);\n        return;\n      }\n\n      switch (this.currentState) {\n        case State.UNDETERMINED:\n          if (event.eventType === EventTypes.DOWN) {\n            this.begin(event);\n          }\n\n          this.startTap(event);\n          break;\n\n        case State.BEGAN:\n          if (event.eventType === EventTypes.UP) {\n            this.endTap(event);\n          }\n\n          if (event.eventType === EventTypes.DOWN) {\n            this.startTap(event);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"trySettingPosition\",\n    value: function trySettingPosition(event) {\n      if (this.currentState !== State.UNDETERMINED) {\n        return;\n      }\n\n      this.offsetX = 0;\n      this.offsetY = 0;\n      this.startX = event.x;\n      this.startY = event.y;\n    }\n  }, {\n    key: \"shouldFail\",\n    value: function shouldFail() {\n      var dx = this.lastX - this.startX + this.offsetX;\n\n      if (this.maxDeltaX !== Number.MIN_SAFE_INTEGER && Math.abs(dx) > this.maxDeltaX) {\n        return true;\n      }\n\n      var dy = this.lastY - this.startY + this.offsetY;\n\n      if (this.maxDeltaY !== Number.MIN_SAFE_INTEGER && Math.abs(dy) > this.maxDeltaY) {\n        return true;\n      }\n\n      var dist = dy * dy + dx * dx;\n      return this.maxDistSq !== Number.MIN_SAFE_INTEGER && dist > this.maxDistSq;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(event) {\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"activate\", this).call(this, event);\n\n      if (!this.isAwaiting()) {\n        this.end(event);\n      }\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.resetProgress();\n      this.clearTimeouts();\n    }\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {\n      this.tapsSoFar = 0;\n      this.currentMaxNumberOfPointers = 0;\n    }\n  }]);\n\n  return TapGestureHandler;\n}(GestureHandler);\n\nexport { TapGestureHandler as default };","map":{"version":3,"sources":["TapGestureHandler.ts"],"names":["DEFAULT_MAX_DURATION_MS","DEFAULT_MAX_DELAY_MS","DEFAULT_NUMBER_OF_TAPS","DEFAULT_MIN_NUMBER_OF_POINTERS","Number","init","updateGestureConfig","enabled","props","resetConfig","transformNativeEvent","x","event","y","absoluteX","absoluteY","clearTimeouts","clearTimeout","startTap","setTimeout","endTap","onPointerDown","onPointerAdd","onPointerUp","onPointerRemove","onPointerMove","onPointerOutOfBounds","onPointerCancel","updateState","State","EventTypes","trySettingPosition","shouldFail","dx","Math","dy","dist","activate","onCancel","resetProgress"],"mappings":"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","sourcesContent":["import { State } from '../../State';\nimport { AdaptedPointerEvent, EventTypes } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\n\nconst DEFAULT_MAX_DURATION_MS = 500;\nconst DEFAULT_MAX_DELAY_MS = 200;\nconst DEFAULT_NUMBER_OF_TAPS = 1;\nconst DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\n\nexport default class TapGestureHandler extends GestureHandler {\n  private maxDeltaX = Number.MIN_SAFE_INTEGER;\n  private maxDeltaY = Number.MIN_SAFE_INTEGER;\n  private maxDistSq = Number.MIN_SAFE_INTEGER;\n  private maxDurationMs = DEFAULT_MAX_DURATION_MS;\n  private maxDelayMs = DEFAULT_MAX_DELAY_MS;\n\n  private numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n  private minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n  private currentMaxNumberOfPointers = 1;\n\n  private startX = 0;\n  private startY = 0;\n  private offsetX = 0;\n  private offsetY = 0;\n  private lastX = 0;\n  private lastY = 0;\n\n  private waitTimeout: number | undefined;\n  private delayTimeout: number | undefined;\n\n  private tapsSoFar = 0;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n    this.setShouldCancelWhenOutside(true);\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    this.enabled = enabled;\n\n    if (this.config.numberOfTaps !== undefined) {\n      this.numberOfTaps = this.config.numberOfTaps;\n    }\n\n    if (this.config.maxDurationMs !== undefined) {\n      this.maxDurationMs = this.config.maxDurationMs;\n    }\n\n    if (this.config.maxDelayMs !== undefined) {\n      this.maxDelayMs = this.config.maxDelayMs;\n    }\n\n    if (this.config.maxDeltaX !== undefined) {\n      this.maxDeltaX = this.config.maxDeltaX;\n    }\n\n    if (this.config.maxDeltaY !== undefined) {\n      this.maxDeltaY = this.config.maxDeltaY;\n    }\n\n    if (this.config.maxDistSq !== undefined) {\n      this.maxDistSq = this.config.maxDistSq;\n    }\n\n    if (this.config.minPointers !== undefined) {\n      this.minNumberOfPointers = this.config.minPointers;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n\n    this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n    this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n    this.maxDistSq = Number.MIN_SAFE_INTEGER;\n    this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n    this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n    this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n    this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n  }\n\n  protected transformNativeEvent(event: AdaptedPointerEvent) {\n    return {\n      x: event.offsetX,\n      y: event.offsetY,\n      absoluteX: event.x,\n      absoluteY: event.y,\n    };\n  }\n\n  private clearTimeouts(): void {\n    clearTimeout(this.waitTimeout);\n    clearTimeout(this.delayTimeout);\n  }\n\n  private startTap(event: AdaptedPointerEvent): void {\n    this.clearTimeouts();\n\n    this.waitTimeout = setTimeout(() => this.fail(event), this.maxDurationMs);\n  }\n\n  private endTap(event: AdaptedPointerEvent): void {\n    this.clearTimeouts();\n\n    if (\n      ++this.tapsSoFar === this.numberOfTaps &&\n      this.currentMaxNumberOfPointers >= this.minNumberOfPointers\n    ) {\n      this.activate(event);\n    } else {\n      this.delayTimeout = setTimeout(() => this.fail(event), this.maxDelayMs);\n    }\n  }\n\n  //Handling Events\n  protected onPointerDown(event: AdaptedPointerEvent): void {\n    super.onPointerDown(event);\n    this.tracker.addToTracker(event);\n\n    this.trySettingPosition(event);\n\n    if (this.tracker.getTrackedPointersCount() > 1) {\n      this.onPointerAdd(event);\n    } else {\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n    }\n    this.updateState(event);\n  }\n\n  protected onPointerAdd(_event: AdaptedPointerEvent): void {\n    this.offsetX += this.lastX - this.startX;\n    this.offsetY += this.lastY = this.startY;\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.startX = this.lastX;\n    this.startY = this.lastY;\n  }\n\n  protected onPointerUp(event: AdaptedPointerEvent): void {\n    if (this.tracker.getTrackedPointersCount() > 1) {\n      this.tracker.removeFromTracker(event.pointerId);\n\n      this.onPointerRemove(event);\n    } else {\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n\n      this.tracker.removeFromTracker(event.pointerId);\n    }\n\n    this.updateState(event);\n  }\n\n  protected onPointerRemove(_event: AdaptedPointerEvent): void {\n    this.offsetX += this.lastX - this.startX;\n    this.offsetY += this.lastY = this.startY;\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.startX = this.lastX;\n    this.startY = this.lastY;\n  }\n\n  protected onPointerMove(event: AdaptedPointerEvent): void {\n    this.trySettingPosition(event);\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n  }\n  protected onPointerOutOfBounds(event: AdaptedPointerEvent): void {\n    this.trySettingPosition(event);\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n  }\n\n  protected onPointerCancel(event: AdaptedPointerEvent): void {\n    this.tracker.resetTracker();\n    this.fail(event);\n  }\n\n  private updateState(event: AdaptedPointerEvent): void {\n    if (\n      this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()\n    ) {\n      this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n    }\n\n    if (this.shouldFail()) {\n      this.fail(event);\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.UNDETERMINED:\n        if (event.eventType === EventTypes.DOWN) {\n          this.begin(event);\n        }\n        this.startTap(event);\n        break;\n      case State.BEGAN:\n        if (event.eventType === EventTypes.UP) {\n          this.endTap(event);\n        }\n        if (event.eventType === EventTypes.DOWN) {\n          this.startTap(event);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private trySettingPosition(event: AdaptedPointerEvent): void {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.startX = event.x;\n    this.startY = event.y;\n  }\n\n  private shouldFail(): boolean {\n    const dx = this.lastX - this.startX + this.offsetX;\n    if (\n      this.maxDeltaX !== Number.MIN_SAFE_INTEGER &&\n      Math.abs(dx) > this.maxDeltaX\n    ) {\n      return true;\n    }\n\n    const dy = this.lastY - this.startY + this.offsetY;\n    if (\n      this.maxDeltaY !== Number.MIN_SAFE_INTEGER &&\n      Math.abs(dy) > this.maxDeltaY\n    ) {\n      return true;\n    }\n\n    const dist = dy * dy + dx * dx;\n\n    return this.maxDistSq !== Number.MIN_SAFE_INTEGER && dist > this.maxDistSq;\n  }\n\n  protected activate(event: AdaptedPointerEvent): void {\n    super.activate(event);\n\n    if (!this.isAwaiting()) {\n      this.end(event);\n    }\n  }\n\n  protected onCancel(): void {\n    this.resetProgress();\n    this.clearTimeouts();\n  }\n\n  protected resetProgress(): void {\n    this.tapsSoFar = 0;\n    this.currentMaxNumberOfPointers = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}