{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { isIOS } from \"../../lib/common\";\nimport { createModuleNamespace, FirebaseModule } from \"../../lib/internal\";\nimport UtilsStatics from \"./UtilsStatics\";\nvar namespace = 'utils';\nvar statics = UtilsStatics;\nvar nativeModuleName = 'RNFBUtilsModule';\n\nvar FirebaseUtilsModule = function (_FirebaseModule) {\n  _inherits(FirebaseUtilsModule, _FirebaseModule);\n\n  var _super = _createSuper(FirebaseUtilsModule);\n\n  function FirebaseUtilsModule() {\n    _classCallCheck(this, FirebaseUtilsModule);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FirebaseUtilsModule, [{\n    key: \"isRunningInTestLab\",\n    get: function get() {\n      if (isIOS) {\n        return false;\n      }\n\n      return this.native.isRunningInTestLab;\n    }\n  }, {\n    key: \"playServicesAvailability\",\n    get: function get() {\n      if (isIOS) {\n        return {\n          isAvailable: true,\n          status: 0\n        };\n      }\n\n      return this.native.androidPlayServices;\n    }\n  }, {\n    key: \"getPlayServicesStatus\",\n    value: function getPlayServicesStatus() {\n      if (isIOS) {\n        return Promise.resolve({\n          isAvailable: true,\n          status: 0\n        });\n      }\n\n      return this.native.androidGetPlayServicesStatus();\n    }\n  }, {\n    key: \"promptForPlayServices\",\n    value: function promptForPlayServices() {\n      if (isIOS) {\n        return Promise.resolve();\n      }\n\n      return this.native.androidPromptForPlayServices();\n    }\n  }, {\n    key: \"makePlayServicesAvailable\",\n    value: function makePlayServicesAvailable() {\n      if (isIOS) {\n        return Promise.resolve();\n      }\n\n      return this.native.androidMakePlayServicesAvailable();\n    }\n  }, {\n    key: \"resolutionForPlayServices\",\n    value: function resolutionForPlayServices() {\n      if (isIOS) {\n        return Promise.resolve();\n      }\n\n      return this.native.androidResolutionForPlayServices();\n    }\n  }, {\n    key: \"logInfo\",\n    value: function logInfo() {\n      var _logger;\n\n      return (_logger = logger).logInfo.apply(_logger, arguments);\n    }\n  }]);\n\n  return FirebaseUtilsModule;\n}(FirebaseModule);\n\nexport default createModuleNamespace({\n  statics: statics,\n  version: UtilsStatics.SDK_VERSION,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: false,\n  hasMultiAppSupport: false,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseUtilsModule\n});","map":{"version":3,"names":["isIOS","createModuleNamespace","FirebaseModule","UtilsStatics","namespace","statics","nativeModuleName","FirebaseUtilsModule","native","isRunningInTestLab","isAvailable","status","androidPlayServices","Promise","resolve","androidGetPlayServicesStatus","androidPromptForPlayServices","androidMakePlayServicesAvailable","androidResolutionForPlayServices","logger","logInfo","version","SDK_VERSION","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass"],"sources":["C:/Users/matda/OneDrive/Documents/eventio/node_modules/@react-native-firebase/app/lib/utils/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isIOS } from '../../lib/common';\nimport { createModuleNamespace, FirebaseModule } from '../../lib/internal';\nimport UtilsStatics from './UtilsStatics';\n\nconst namespace = 'utils';\nconst statics = UtilsStatics;\nconst nativeModuleName = 'RNFBUtilsModule';\n\nclass FirebaseUtilsModule extends FirebaseModule {\n  get isRunningInTestLab() {\n    if (isIOS) {\n      return false;\n    }\n    return this.native.isRunningInTestLab;\n  }\n\n  get playServicesAvailability() {\n    if (isIOS) {\n      return {\n        isAvailable: true,\n        status: 0,\n      };\n    }\n    return this.native.androidPlayServices;\n  }\n\n  getPlayServicesStatus() {\n    if (isIOS) {\n      return Promise.resolve({\n        isAvailable: true,\n        status: 0,\n      });\n    }\n    return this.native.androidGetPlayServicesStatus();\n  }\n\n  promptForPlayServices() {\n    if (isIOS) {\n      return Promise.resolve();\n    }\n    return this.native.androidPromptForPlayServices();\n  }\n\n  makePlayServicesAvailable() {\n    if (isIOS) {\n      return Promise.resolve();\n    }\n    return this.native.androidMakePlayServicesAvailable();\n  }\n\n  resolutionForPlayServices() {\n    if (isIOS) {\n      return Promise.resolve();\n    }\n    return this.native.androidResolutionForPlayServices();\n  }\n\n  logInfo(...args) {\n    return logger.logInfo(...args);\n  }\n}\n\n// import { utils } from '@react-native-firebase/app';\n// utils().X(...);\nexport default createModuleNamespace({\n  statics,\n  version: UtilsStatics.SDK_VERSION,\n  namespace,\n  nativeModuleName,\n  nativeEvents: false,\n  hasMultiAppSupport: false,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseUtilsModule,\n});\n"],"mappings":";;;;;;;;;;AAiBA,SAASA,KAAT;AACA,SAASC,qBAAT,EAAgCC,cAAhC;AACA,OAAOC,YAAP;AAEA,IAAMC,SAAS,GAAG,OAAlB;AACA,IAAMC,OAAO,GAAGF,YAAhB;AACA,IAAMG,gBAAgB,GAAG,iBAAzB;;IAEMC,mB;;;;;;;;;;;;;SACJ,eAAyB;MACvB,IAAIP,KAAJ,EAAW;QACT,OAAO,KAAP;MACD;;MACD,OAAO,KAAKQ,MAAL,CAAYC,kBAAnB;IACD;;;SAED,eAA+B;MAC7B,IAAIT,KAAJ,EAAW;QACT,OAAO;UACLU,WAAW,EAAE,IADR;UAELC,MAAM,EAAE;QAFH,CAAP;MAID;;MACD,OAAO,KAAKH,MAAL,CAAYI,mBAAnB;IACD;;;WAED,iCAAwB;MACtB,IAAIZ,KAAJ,EAAW;QACT,OAAOa,OAAO,CAACC,OAAR,CAAgB;UACrBJ,WAAW,EAAE,IADQ;UAErBC,MAAM,EAAE;QAFa,CAAhB,CAAP;MAID;;MACD,OAAO,KAAKH,MAAL,CAAYO,4BAAZ,EAAP;IACD;;;WAED,iCAAwB;MACtB,IAAIf,KAAJ,EAAW;QACT,OAAOa,OAAO,CAACC,OAAR,EAAP;MACD;;MACD,OAAO,KAAKN,MAAL,CAAYQ,4BAAZ,EAAP;IACD;;;WAED,qCAA4B;MAC1B,IAAIhB,KAAJ,EAAW;QACT,OAAOa,OAAO,CAACC,OAAR,EAAP;MACD;;MACD,OAAO,KAAKN,MAAL,CAAYS,gCAAZ,EAAP;IACD;;;WAED,qCAA4B;MAC1B,IAAIjB,KAAJ,EAAW;QACT,OAAOa,OAAO,CAACC,OAAR,EAAP;MACD;;MACD,OAAO,KAAKN,MAAL,CAAYU,gCAAZ,EAAP;IACD;;;WAED,mBAAiB;MAAA;;MACf,OAAO,WAAAC,MAAM,EAACC,OAAP,0BAAP;IACD;;;;EAnD+BlB,c;;AAwDlC,eAAeD,qBAAqB,CAAC;EACnCI,OAAO,EAAPA,OADmC;EAEnCgB,OAAO,EAAElB,YAAY,CAACmB,WAFa;EAGnClB,SAAS,EAATA,SAHmC;EAInCE,gBAAgB,EAAhBA,gBAJmC;EAKnCiB,YAAY,EAAE,KALqB;EAMnCC,kBAAkB,EAAE,KANe;EAOnCC,2BAA2B,EAAE,KAPM;EAQnCC,WAAW,EAAEnB;AARsB,CAAD,CAApC"},"metadata":{},"sourceType":"module"}