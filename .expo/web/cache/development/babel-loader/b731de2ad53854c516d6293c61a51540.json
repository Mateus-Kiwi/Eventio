{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { isAndroid, isBoolean, isString, isNull, isValidUrl } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport ConfirmationResult from \"./ConfirmationResult\";\nimport PhoneAuthListener from \"./PhoneAuthListener\";\nimport EmailAuthProvider from \"./providers/EmailAuthProvider\";\nimport FacebookAuthProvider from \"./providers/FacebookAuthProvider\";\nimport GithubAuthProvider from \"./providers/GithubAuthProvider\";\nimport GoogleAuthProvider from \"./providers/GoogleAuthProvider\";\nimport OAuthProvider from \"./providers/OAuthProvider\";\nimport PhoneAuthProvider from \"./providers/PhoneAuthProvider\";\nimport TwitterAuthProvider from \"./providers/TwitterAuthProvider\";\nimport AppleAuthProvider from \"./providers/AppleAuthProvider\";\nimport Settings from \"./Settings\";\nimport User from \"./User\";\nimport version from \"./version\";\nvar statics = {\n  AppleAuthProvider: AppleAuthProvider,\n  EmailAuthProvider: EmailAuthProvider,\n  PhoneAuthProvider: PhoneAuthProvider,\n  GoogleAuthProvider: GoogleAuthProvider,\n  GithubAuthProvider: GithubAuthProvider,\n  TwitterAuthProvider: TwitterAuthProvider,\n  FacebookAuthProvider: FacebookAuthProvider,\n  OAuthProvider: OAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error'\n  }\n};\nvar namespace = 'auth';\nvar nativeModuleName = 'RNFBAuthModule';\n\nvar FirebaseAuthModule = function (_FirebaseModule) {\n  _inherits(FirebaseAuthModule, _FirebaseModule);\n\n  var _super = _createSuper(FirebaseAuthModule);\n\n  function FirebaseAuthModule() {\n    var _this;\n\n    _classCallCheck(this, FirebaseAuthModule);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._user = null;\n    _this._settings = null;\n    _this._authResult = false;\n    _this._languageCode = _this.native.APP_LANGUAGE[_this.app._name];\n    _this._tenantId = null;\n\n    if (!_this.languageCode) {\n      _this._languageCode = _this.native.APP_LANGUAGE['[DEFAULT]'];\n    }\n\n    if (_this.native.APP_USER[_this.app._name]) {\n      _this._setUser(_this.native.APP_USER[_this.app._name]);\n    }\n\n    _this.emitter.addListener(_this.eventNameForApp('auth_state_changed'), function (event) {\n      _this._setUser(event.user);\n\n      _this.emitter.emit(_this.eventNameForApp('onAuthStateChanged'), _this._user);\n    });\n\n    _this.emitter.addListener(_this.eventNameForApp('phone_auth_state_changed'), function (event) {\n      var eventKey = \"phone:auth:\" + event.requestKey + \":\" + event.type;\n\n      _this.emitter.emit(eventKey, event.state);\n    });\n\n    _this.emitter.addListener(_this.eventNameForApp('auth_id_token_changed'), function (auth) {\n      _this._setUser(auth.user);\n\n      _this.emitter.emit(_this.eventNameForApp('onIdTokenChanged'), _this._user);\n    });\n\n    _this.native.addAuthStateListener();\n\n    _this.native.addIdTokenListener();\n\n    return _this;\n  }\n\n  _createClass(FirebaseAuthModule, [{\n    key: \"languageCode\",\n    get: function get() {\n      return this._languageCode;\n    }\n  }, {\n    key: \"tenantId\",\n    get: function get() {\n      return this._tenantId;\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      if (!this._settings) {\n        this._settings = new Settings(this);\n      }\n\n      return this._settings;\n    }\n  }, {\n    key: \"currentUser\",\n    get: function get() {\n      return this._user;\n    }\n  }, {\n    key: \"_setUser\",\n    value: function _setUser(user) {\n      this._user = user ? new User(this, user) : null;\n      this._authResult = true;\n      this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n      return this._user;\n    }\n  }, {\n    key: \"_setUserCredential\",\n    value: function _setUserCredential(userCredential) {\n      var user = new User(this, userCredential.user);\n      this._user = user;\n      this._authResult = true;\n      this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n      return {\n        additionalUserInfo: userCredential.additionalUserInfo,\n        user: user\n      };\n    }\n  }, {\n    key: \"setLanguageCode\",\n    value: function () {\n      var _setLanguageCode = _asyncToGenerator(function* (code) {\n        if (!isString(code) && !isNull(code)) {\n          throw new Error(\"firebase.auth().setLanguageCode(*) expected 'languageCode' to be a string or null value\");\n        }\n\n        yield this.native.setLanguageCode(code);\n\n        if (code === null) {\n          this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n\n          if (!this.languageCode) {\n            this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n          }\n        } else {\n          this._languageCode = code;\n        }\n      });\n\n      function setLanguageCode(_x) {\n        return _setLanguageCode.apply(this, arguments);\n      }\n\n      return setLanguageCode;\n    }()\n  }, {\n    key: \"setTenantId\",\n    value: function () {\n      var _setTenantId = _asyncToGenerator(function* (tenantId) {\n        if (!isString(tenantId)) {\n          throw new Error(\"firebase.auth().setTenantId(*) expected 'tenantId' to be a string\");\n        }\n\n        this._tenantId = tenantId;\n        yield this.native.setTenantId(tenantId);\n      });\n\n      function setTenantId(_x2) {\n        return _setTenantId.apply(this, arguments);\n      }\n\n      return setTenantId;\n    }()\n  }, {\n    key: \"_parseListener\",\n    value: function _parseListener(listenerOrObserver) {\n      return typeof listenerOrObserver === 'object' ? listenerOrObserver.next.bind(listenerOrObserver) : listenerOrObserver;\n    }\n  }, {\n    key: \"onAuthStateChanged\",\n    value: function onAuthStateChanged(listenerOrObserver) {\n      var _this2 = this;\n\n      var listener = this._parseListener(listenerOrObserver);\n\n      var subscription = this.emitter.addListener(this.eventNameForApp('onAuthStateChanged'), listener);\n\n      if (this._authResult) {\n        Promise.resolve().then(function () {\n          listener(_this2._user || null);\n        });\n      }\n\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onIdTokenChanged\",\n    value: function onIdTokenChanged(listenerOrObserver) {\n      var _this3 = this;\n\n      var listener = this._parseListener(listenerOrObserver);\n\n      var subscription = this.emitter.addListener(this.eventNameForApp('onIdTokenChanged'), listener);\n\n      if (this._authResult) {\n        Promise.resolve().then(function () {\n          listener(_this3._user || null);\n        });\n      }\n\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onUserChanged\",\n    value: function onUserChanged(listenerOrObserver) {\n      var _this4 = this;\n\n      var listener = this._parseListener(listenerOrObserver);\n\n      var subscription = this.emitter.addListener(this.eventNameForApp('onUserChanged'), listener);\n\n      if (this._authResult) {\n        Promise.resolve().then(function () {\n          listener(_this4._user || null);\n        });\n      }\n\n      return function () {\n        subscription.remove();\n      };\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      var _this5 = this;\n\n      return this.native.signOut().then(function () {\n        _this5._setUser();\n      });\n    }\n  }, {\n    key: \"signInAnonymously\",\n    value: function signInAnonymously() {\n      var _this6 = this;\n\n      return this.native.signInAnonymously().then(function (userCredential) {\n        return _this6._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithPhoneNumber\",\n    value: function signInWithPhoneNumber(phoneNumber, forceResend) {\n      var _this7 = this;\n\n      if (isAndroid) {\n        return this.native.signInWithPhoneNumber(phoneNumber, forceResend || false).then(function (result) {\n          return new ConfirmationResult(_this7, result.verificationId);\n        });\n      }\n\n      return this.native.signInWithPhoneNumber(phoneNumber).then(function (result) {\n        return new ConfirmationResult(_this7, result.verificationId);\n      });\n    }\n  }, {\n    key: \"verifyPhoneNumber\",\n    value: function verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n      var _forceResend = forceResend;\n      var _autoVerifyTimeout = 60;\n\n      if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n        _forceResend = autoVerifyTimeoutOrForceResend;\n      } else {\n        _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n      }\n\n      return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n    }\n  }, {\n    key: \"createUserWithEmailAndPassword\",\n    value: function createUserWithEmailAndPassword(email, password) {\n      var _this8 = this;\n\n      return this.native.createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n        return _this8._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithEmailAndPassword\",\n    value: function signInWithEmailAndPassword(email, password) {\n      var _this9 = this;\n\n      return this.native.signInWithEmailAndPassword(email, password).then(function (userCredential) {\n        return _this9._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithCustomToken\",\n    value: function signInWithCustomToken(customToken) {\n      var _this10 = this;\n\n      return this.native.signInWithCustomToken(customToken).then(function (userCredential) {\n        return _this10._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithCredential\",\n    value: function signInWithCredential(credential) {\n      var _this11 = this;\n\n      return this.native.signInWithCredential(credential.providerId, credential.token, credential.secret).then(function (userCredential) {\n        return _this11._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"sendPasswordResetEmail\",\n    value: function sendPasswordResetEmail(email) {\n      var actionCodeSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return this.native.sendPasswordResetEmail(email, actionCodeSettings);\n    }\n  }, {\n    key: \"sendSignInLinkToEmail\",\n    value: function sendSignInLinkToEmail(email) {\n      var actionCodeSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.native.sendSignInLinkToEmail(email, actionCodeSettings);\n    }\n  }, {\n    key: \"isSignInWithEmailLink\",\n    value: function isSignInWithEmailLink(emailLink) {\n      return typeof emailLink === 'string' && (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) && (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'));\n    }\n  }, {\n    key: \"signInWithEmailLink\",\n    value: function signInWithEmailLink(email, emailLink) {\n      var _this12 = this;\n\n      return this.native.signInWithEmailLink(email, emailLink).then(function (userCredential) {\n        return _this12._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"confirmPasswordReset\",\n    value: function confirmPasswordReset(code, newPassword) {\n      return this.native.confirmPasswordReset(code, newPassword);\n    }\n  }, {\n    key: \"applyActionCode\",\n    value: function applyActionCode(code) {\n      var _this13 = this;\n\n      return this.native.applyActionCode(code).then(function (user) {\n        _this13._setUser(user);\n      });\n    }\n  }, {\n    key: \"checkActionCode\",\n    value: function checkActionCode(code) {\n      return this.native.checkActionCode(code);\n    }\n  }, {\n    key: \"fetchSignInMethodsForEmail\",\n    value: function fetchSignInMethodsForEmail(email) {\n      return this.native.fetchSignInMethodsForEmail(email);\n    }\n  }, {\n    key: \"verifyPasswordResetCode\",\n    value: function verifyPasswordResetCode(code) {\n      return this.native.verifyPasswordResetCode(code);\n    }\n  }, {\n    key: \"useUserAccessGroup\",\n    value: function useUserAccessGroup(userAccessGroup) {\n      if (isAndroid) {\n        return Promise.resolve();\n      }\n\n      return this.native.useUserAccessGroup(userAccessGroup);\n    }\n  }, {\n    key: \"getRedirectResult\",\n    value: function getRedirectResult() {\n      throw new Error('firebase.auth().getRedirectResult() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"setPersistence\",\n    value: function setPersistence() {\n      throw new Error('firebase.auth().setPersistence() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"signInWithPopup\",\n    value: function signInWithPopup() {\n      throw new Error('firebase.auth().signInWithPopup() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"signInWithRedirect\",\n    value: function signInWithRedirect() {\n      throw new Error('firebase.auth().signInWithRedirect() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"useDeviceLanguage\",\n    value: function useDeviceLanguage() {\n      throw new Error('firebase.auth().useDeviceLanguage() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(url) {\n      if (!url || !isString(url) || !isValidUrl(url)) {\n        throw new Error('firebase.auth().useEmulator() takes a non-empty string URL');\n      }\n\n      var _url = url;\n      var androidBypassEmulatorUrlRemap = typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' && this.firebaseJson.android_bypass_emulator_url_remap;\n\n      if (!androidBypassEmulatorUrlRemap && isAndroid && _url) {\n        if (_url.startsWith('http://localhost')) {\n          _url = _url.replace('http://localhost', 'http://10.0.2.2');\n          console.log('Mapping auth host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n        }\n\n        if (_url.startsWith('http://127.0.0.1')) {\n          _url = _url.replace('http://127.0.0.1', 'http://10.0.2.2');\n          console.log('Mapping auth host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n        }\n      }\n\n      var hostPortRegex = /^http:\\/\\/([\\w\\d-.]+):(\\d+)$/;\n\n      var urlMatches = _url.match(hostPortRegex);\n\n      if (!urlMatches) {\n        throw new Error('firebase.auth().useEmulator() unable to parse host and port from URL');\n      }\n\n      var host = urlMatches[1];\n      var port = parseInt(urlMatches[2], 10);\n      this.native.useEmulator(host, port);\n      return [host, port];\n    }\n  }]);\n\n  return FirebaseAuthModule;\n}(FirebaseModule);\n\nexport var SDK_VERSION = version;\nexport default createModuleNamespace({\n  statics: statics,\n  version: version,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseAuthModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"names":["isAndroid","isBoolean","isString","isNull","isValidUrl","createModuleNamespace","FirebaseModule","getFirebaseRoot","ConfirmationResult","PhoneAuthListener","EmailAuthProvider","FacebookAuthProvider","GithubAuthProvider","GoogleAuthProvider","OAuthProvider","PhoneAuthProvider","TwitterAuthProvider","AppleAuthProvider","Settings","User","version","statics","PhoneAuthState","CODE_SENT","AUTO_VERIFY_TIMEOUT","AUTO_VERIFIED","ERROR","namespace","nativeModuleName","FirebaseAuthModule","args","_user","_settings","_authResult","_languageCode","native","APP_LANGUAGE","app","_name","_tenantId","languageCode","APP_USER","_setUser","emitter","addListener","eventNameForApp","event","user","emit","eventKey","requestKey","type","state","auth","addAuthStateListener","addIdTokenListener","userCredential","additionalUserInfo","code","Error","setLanguageCode","tenantId","setTenantId","listenerOrObserver","next","bind","listener","_parseListener","subscription","Promise","resolve","then","remove","signOut","signInAnonymously","_setUserCredential","phoneNumber","forceResend","signInWithPhoneNumber","result","verificationId","autoVerifyTimeoutOrForceResend","_forceResend","_autoVerifyTimeout","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","customToken","signInWithCustomToken","credential","signInWithCredential","providerId","token","secret","actionCodeSettings","sendPasswordResetEmail","sendSignInLinkToEmail","emailLink","includes","signInWithEmailLink","newPassword","confirmPasswordReset","applyActionCode","checkActionCode","fetchSignInMethodsForEmail","verifyPasswordResetCode","userAccessGroup","useUserAccessGroup","url","_url","androidBypassEmulatorUrlRemap","firebaseJson","android_bypass_emulator_url_remap","startsWith","replace","console","log","hostPortRegex","urlMatches","match","host","port","parseInt","useEmulator","SDK_VERSION","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"sources":["E:/Code/Curso/Eventio/node_modules/@react-native-firebase/auth/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isAndroid,\n  isBoolean,\n  isString,\n  isNull,\n  isValidUrl,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport ConfirmationResult from './ConfirmationResult';\nimport PhoneAuthListener from './PhoneAuthListener';\nimport EmailAuthProvider from './providers/EmailAuthProvider';\nimport FacebookAuthProvider from './providers/FacebookAuthProvider';\nimport GithubAuthProvider from './providers/GithubAuthProvider';\nimport GoogleAuthProvider from './providers/GoogleAuthProvider';\nimport OAuthProvider from './providers/OAuthProvider';\nimport PhoneAuthProvider from './providers/PhoneAuthProvider';\nimport TwitterAuthProvider from './providers/TwitterAuthProvider';\nimport AppleAuthProvider from './providers/AppleAuthProvider';\nimport Settings from './Settings';\nimport User from './User';\nimport version from './version';\n\nconst statics = {\n  AppleAuthProvider,\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  OAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error',\n  },\n};\n\nconst namespace = 'auth';\n\nconst nativeModuleName = 'RNFBAuthModule';\n\nclass FirebaseAuthModule extends FirebaseModule {\n  constructor(...args) {\n    super(...args);\n    this._user = null;\n    this._settings = null;\n    this._authResult = false;\n    this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n    this._tenantId = null;\n\n    if (!this.languageCode) {\n      this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n    }\n\n    if (this.native.APP_USER[this.app._name]) {\n      this._setUser(this.native.APP_USER[this.app._name]);\n    }\n\n    this.emitter.addListener(this.eventNameForApp('auth_state_changed'), event => {\n      this._setUser(event.user);\n      this.emitter.emit(this.eventNameForApp('onAuthStateChanged'), this._user);\n    });\n\n    this.emitter.addListener(this.eventNameForApp('phone_auth_state_changed'), event => {\n      const eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n      this.emitter.emit(eventKey, event.state);\n    });\n\n    this.emitter.addListener(this.eventNameForApp('auth_id_token_changed'), auth => {\n      this._setUser(auth.user);\n      this.emitter.emit(this.eventNameForApp('onIdTokenChanged'), this._user);\n    });\n\n    this.native.addAuthStateListener();\n    this.native.addIdTokenListener();\n  }\n\n  get languageCode() {\n    return this._languageCode;\n  }\n\n  get tenantId() {\n    return this._tenantId;\n  }\n\n  get settings() {\n    if (!this._settings) {\n      this._settings = new Settings(this);\n    }\n    return this._settings;\n  }\n\n  get currentUser() {\n    return this._user;\n  }\n\n  _setUser(user) {\n    this._user = user ? new User(this, user) : null;\n    this._authResult = true;\n    this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n    return this._user;\n  }\n\n  _setUserCredential(userCredential) {\n    const user = new User(this, userCredential.user);\n    this._user = user;\n    this._authResult = true;\n    this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n    return {\n      additionalUserInfo: userCredential.additionalUserInfo,\n      user,\n    };\n  }\n\n  async setLanguageCode(code) {\n    if (!isString(code) && !isNull(code)) {\n      throw new Error(\n        \"firebase.auth().setLanguageCode(*) expected 'languageCode' to be a string or null value\",\n      );\n    }\n\n    await this.native.setLanguageCode(code);\n\n    if (code === null) {\n      this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n\n      if (!this.languageCode) {\n        this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n      }\n    } else {\n      this._languageCode = code;\n    }\n  }\n\n  async setTenantId(tenantId) {\n    if (!isString(tenantId)) {\n      throw new Error(\"firebase.auth().setTenantId(*) expected 'tenantId' to be a string\");\n    }\n    this._tenantId = tenantId;\n    await this.native.setTenantId(tenantId);\n  }\n\n  _parseListener(listenerOrObserver) {\n    return typeof listenerOrObserver === 'object'\n      ? listenerOrObserver.next.bind(listenerOrObserver)\n      : listenerOrObserver;\n  }\n\n  onAuthStateChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(\n      this.eventNameForApp('onAuthStateChanged'),\n      listener,\n    );\n\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => subscription.remove();\n  }\n\n  onIdTokenChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(\n      this.eventNameForApp('onIdTokenChanged'),\n      listener,\n    );\n\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => subscription.remove();\n  }\n\n  onUserChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(this.eventNameForApp('onUserChanged'), listener);\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n\n    return () => {\n      subscription.remove();\n    };\n  }\n\n  signOut() {\n    return this.native.signOut().then(() => {\n      this._setUser();\n    });\n  }\n\n  signInAnonymously() {\n    return this.native\n      .signInAnonymously()\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithPhoneNumber(phoneNumber, forceResend) {\n    if (isAndroid) {\n      return this.native\n        .signInWithPhoneNumber(phoneNumber, forceResend || false)\n        .then(result => new ConfirmationResult(this, result.verificationId));\n    }\n\n    return this.native\n      .signInWithPhoneNumber(phoneNumber)\n      .then(result => new ConfirmationResult(this, result.verificationId));\n  }\n\n  verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n    let _forceResend = forceResend;\n    let _autoVerifyTimeout = 60;\n\n    if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n      _forceResend = autoVerifyTimeoutOrForceResend;\n    } else {\n      _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n    }\n\n    return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n  }\n\n  createUserWithEmailAndPassword(email, password) {\n    return this.native\n      .createUserWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithEmailAndPassword(email, password) {\n    return this.native\n      .signInWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithCustomToken(customToken) {\n    return this.native\n      .signInWithCustomToken(customToken)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithCredential(credential) {\n    return this.native\n      .signInWithCredential(credential.providerId, credential.token, credential.secret)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  sendPasswordResetEmail(email, actionCodeSettings = null) {\n    return this.native.sendPasswordResetEmail(email, actionCodeSettings);\n  }\n\n  sendSignInLinkToEmail(email, actionCodeSettings = {}) {\n    return this.native.sendSignInLinkToEmail(email, actionCodeSettings);\n  }\n\n  isSignInWithEmailLink(emailLink) {\n    return (\n      typeof emailLink === 'string' &&\n      (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) &&\n      (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'))\n    );\n  }\n\n  signInWithEmailLink(email, emailLink) {\n    return this.native\n      .signInWithEmailLink(email, emailLink)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  confirmPasswordReset(code, newPassword) {\n    return this.native.confirmPasswordReset(code, newPassword);\n  }\n\n  applyActionCode(code) {\n    return this.native.applyActionCode(code).then(user => {\n      this._setUser(user);\n    });\n  }\n\n  checkActionCode(code) {\n    return this.native.checkActionCode(code);\n  }\n\n  fetchSignInMethodsForEmail(email) {\n    return this.native.fetchSignInMethodsForEmail(email);\n  }\n\n  verifyPasswordResetCode(code) {\n    return this.native.verifyPasswordResetCode(code);\n  }\n\n  useUserAccessGroup(userAccessGroup) {\n    if (isAndroid) {\n      return Promise.resolve();\n    }\n    return this.native.useUserAccessGroup(userAccessGroup);\n  }\n\n  getRedirectResult() {\n    throw new Error(\n      'firebase.auth().getRedirectResult() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  setPersistence() {\n    throw new Error('firebase.auth().setPersistence() is unsupported by the native Firebase SDKs.');\n  }\n\n  signInWithPopup() {\n    throw new Error(\n      'firebase.auth().signInWithPopup() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  signInWithRedirect() {\n    throw new Error(\n      'firebase.auth().signInWithRedirect() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  // firebase issue - https://github.com/invertase/react-native-firebase/pull/655#issuecomment-349904680\n  useDeviceLanguage() {\n    throw new Error(\n      'firebase.auth().useDeviceLanguage() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  useEmulator(url) {\n    if (!url || !isString(url) || !isValidUrl(url)) {\n      throw new Error('firebase.auth().useEmulator() takes a non-empty string URL');\n    }\n\n    let _url = url;\n    const androidBypassEmulatorUrlRemap =\n      typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' &&\n      this.firebaseJson.android_bypass_emulator_url_remap;\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _url) {\n      if (_url.startsWith('http://localhost')) {\n        _url = _url.replace('http://localhost', 'http://10.0.2.2');\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping auth host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n      if (_url.startsWith('http://127.0.0.1')) {\n        _url = _url.replace('http://127.0.0.1', 'http://10.0.2.2');\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping auth host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n    }\n\n    // Native calls take the host and port split out\n    const hostPortRegex = /^http:\\/\\/([\\w\\d-.]+):(\\d+)$/;\n    const urlMatches = _url.match(hostPortRegex);\n    if (!urlMatches) {\n      throw new Error('firebase.auth().useEmulator() unable to parse host and port from URL');\n    }\n    const host = urlMatches[1];\n    const port = parseInt(urlMatches[2], 10);\n    this.native.useEmulator(host, port);\n    return [host, port]; // undocumented return, useful for unit testing\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/auth';\nexport const SDK_VERSION = version;\n\n// import auth from '@react-native-firebase/auth';\n// auth().X(...);\nexport default createModuleNamespace({\n  statics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseAuthModule,\n});\n\n// import auth, { firebase } from '@react-native-firebase/auth';\n// auth().X(...);\n// firebase.auth().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}