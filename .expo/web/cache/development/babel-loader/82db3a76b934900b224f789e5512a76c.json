{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar VELOCITY_FACTOR = 0.2;\n\nvar PointerTracker = function () {\n  function PointerTracker() {\n    _classCallCheck(this, PointerTracker);\n\n    _defineProperty(this, \"trackedPointers\", new Map());\n  }\n\n  _createClass(PointerTracker, [{\n    key: \"addToTracker\",\n    value: function addToTracker(event) {\n      if (this.trackedPointers.has(event.pointerId)) {\n        return;\n      }\n\n      var newElement = {\n        lastX: event.x,\n        lastY: event.y,\n        timeStamp: event.time,\n        velocityX: 0,\n        velocityY: 0\n      };\n      this.trackedPointers.set(event.pointerId, newElement);\n    }\n  }, {\n    key: \"removeFromTracker\",\n    value: function removeFromTracker(pointerId) {\n      this.trackedPointers.delete(pointerId);\n    }\n  }, {\n    key: \"track\",\n    value: function track(event) {\n      var element = this.trackedPointers.get(event.pointerId);\n\n      if (!element) {\n        return;\n      }\n\n      var dx = event.x - element.lastX;\n      var dy = event.y - element.lastY;\n      var dt = event.time - element.timeStamp;\n      element.velocityX = dx / dt * 1000 * VELOCITY_FACTOR;\n      element.velocityY = dy / dt * 1000 * VELOCITY_FACTOR;\n      element.lastX = event.x;\n      element.lastY = event.y;\n      this.trackedPointers.set(event.pointerId, element);\n    }\n  }, {\n    key: \"getVelocityX\",\n    value: function getVelocityX(pointerId) {\n      var _this$trackedPointers;\n\n      return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;\n    }\n  }, {\n    key: \"getVelocityY\",\n    value: function getVelocityY(pointerId) {\n      var _this$trackedPointers2;\n\n      return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;\n    }\n  }, {\n    key: \"getLastX\",\n    value: function getLastX(pointerId) {\n      var _this$trackedPointers3;\n\n      return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;\n    }\n  }, {\n    key: \"getLastY\",\n    value: function getLastY(pointerId) {\n      var _this$trackedPointers4;\n\n      return (_this$trackedPointers4 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastY;\n    }\n  }, {\n    key: \"getLastAvgX\",\n    value: function getLastAvgX() {\n      return this.getSumX() / this.trackedPointers.size;\n    }\n  }, {\n    key: \"getLastAvgY\",\n    value: function getLastAvgY() {\n      return this.getSumY() / this.trackedPointers.size;\n    }\n  }, {\n    key: \"getSumX\",\n    value: function getSumX(ignoredPointer) {\n      var sumX = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumX += value.lastX;\n        }\n      });\n      return sumX;\n    }\n  }, {\n    key: \"getSumY\",\n    value: function getSumY(ignoredPointer) {\n      var sumY = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumY += value.lastY;\n        }\n      });\n      return sumY;\n    }\n  }, {\n    key: \"getTrackedPointersCount\",\n    value: function getTrackedPointersCount() {\n      return this.trackedPointers.size;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      var keys = [];\n      this.trackedPointers.forEach(function (_value, key) {\n        keys.push(key);\n      });\n      return keys;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.trackedPointers;\n    }\n  }, {\n    key: \"resetTracker\",\n    value: function resetTracker() {\n      this.trackedPointers.clear();\n    }\n  }], [{\n    key: \"shareCommonPointers\",\n    value: function shareCommonPointers(stPointers, ndPointers) {\n      return stPointers.some(function (pointerId) {\n        return ndPointers.includes(pointerId);\n      });\n    }\n  }]);\n\n  return PointerTracker;\n}();\n\nexport { PointerTracker as default };","map":{"version":3,"sources":["PointerTracker.ts"],"names":["VELOCITY_FACTOR","addToTracker","event","newElement","lastX","lastY","timeStamp","velocityX","velocityY","removeFromTracker","track","element","dx","dy","dt","getVelocityX","getVelocityY","getLastX","getLastY","getLastAvgX","getLastAvgY","getSumX","sumX","key","value","getSumY","sumY","getTrackedPointersCount","getTrackedPointersID","keys","getData","resetTracker","shareCommonPointers","stPointers","pointerId","ndPointers"],"mappings":";;;;;;;;;;;;;;;;;;AAYA,IAAMA,eAAe,GAArB,GAAA;;IAEe,c;EAAqB,0BAAA;IAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EACqB,IADrB,GACqB,EADrB,CAAA;EAAA;;;;WAM3BC,sBAAY,KAAZA,EAA+C;MACpD,IAAI,KAAA,eAAA,CAAA,GAAA,CAAyBC,KAAK,CAAlC,SAAI,CAAJ,EAA+C;QAC7C;MACD;;MAED,IAAMC,UAA0B,GAAG;QACjCC,KAAK,EAAEF,KAAK,CADqB,CAAA;QAEjCG,KAAK,EAAEH,KAAK,CAFqB,CAAA;QAGjCI,SAAS,EAAEJ,KAAK,CAHiB,IAAA;QAIjCK,SAAS,EAJwB,CAAA;QAKjCC,SAAS,EAAE;MALsB,CAAnC;MAQA,KAAA,eAAA,CAAA,GAAA,CAAyBN,KAAK,CAA9B,SAAA,EAAA,UAAA;IACD;;;WAEMO,2BAAiB,SAAjBA,EAA2C;MAChD,KAAA,eAAA,CAAA,MAAA,CAAA,SAAA;IACD;;;WAEMC,eAAK,KAALA,EAAwC;MAC7C,IAAMC,OAAuB,GAAG,KAAA,eAAA,CAAA,GAAA,CAC9BT,KAAK,CADP,SAAgC,CAAhC;;MAIA,IAAI,CAAJ,OAAA,EAAc;QACZ;MACD;;MAED,IAAMU,EAAE,GAAGV,KAAK,CAALA,CAAAA,GAAUS,OAAO,CAA5B,KAAA;MACA,IAAME,EAAE,GAAGX,KAAK,CAALA,CAAAA,GAAUS,OAAO,CAA5B,KAAA;MACA,IAAMG,EAAE,GAAGZ,KAAK,CAALA,IAAAA,GAAaS,OAAO,CAA/B,SAAA;MAEAA,OAAO,CAAPA,SAAAA,GAAqBC,EAAE,GAAH,EAACA,GAAD,IAACA,GAArBD,eAAAA;MACAA,OAAO,CAAPA,SAAAA,GAAqBE,EAAE,GAAH,EAACA,GAAD,IAACA,GAArBF,eAAAA;MAEAA,OAAO,CAAPA,KAAAA,GAAgBT,KAAK,CAArBS,CAAAA;MACAA,OAAO,CAAPA,KAAAA,GAAgBT,KAAK,CAArBS,CAAAA;MAEA,KAAA,eAAA,CAAA,GAAA,CAAyBT,KAAK,CAA9B,SAAA,EAAA,OAAA;IACD;;;WAEMa,sBAAY,SAAZA,EAAwC;MAAA,IAAA,qBAAA;;MAC7C,OAAA,CAAA,qBAAA,GAAO,KAAA,eAAA,CAAA,GAAA,CAAP,SAAO,CAAP,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,qBAAA,CAAP,SAAA;IACD;;;WACMC,sBAAY,SAAZA,EAAwC;MAAA,IAAA,sBAAA;;MAC7C,OAAA,CAAA,sBAAA,GAAO,KAAA,eAAA,CAAA,GAAA,CAAP,SAAO,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,sBAAA,CAAP,SAAA;IACD;;;WACMC,kBAAQ,SAARA,EAAoC;MAAA,IAAA,sBAAA;;MACzC,OAAA,CAAA,sBAAA,GAAO,KAAA,eAAA,CAAA,GAAA,CAAP,SAAO,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,sBAAA,CAAP,KAAA;IACD;;;WACMC,kBAAQ,SAARA,EAAoC;MAAA,IAAA,sBAAA;;MACzC,OAAA,CAAA,sBAAA,GAAO,KAAA,eAAA,CAAA,GAAA,CAAP,SAAO,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,sBAAA,CAAP,KAAA;IACD;;;WACMC,uBAAsB;MAC3B,OAAO,KAAA,OAAA,KAAiB,KAAA,eAAA,CAAxB,IAAA;IACD;;;WACMC,uBAAsB;MAC3B,OAAO,KAAA,OAAA,KAAiB,KAAA,eAAA,CAAxB,IAAA;IACD;;;WACMC,iBAAO,cAAPA,EAAyC;MAC9C,IAAIC,IAAI,GAAR,CAAA;MAEA,KAAA,eAAA,CAAA,OAAA,CAA6B,UAAA,KAAA,EAAA,GAAA,EAAgB;QAC3C,IAAIC,GAAG,KAAP,cAAA,EAA4B;UAC1BD,IAAI,IAAIE,KAAK,CAAbF,KAAAA;QACD;MAHH,CAAA;MAMA,OAAA,IAAA;IACD;;;WACMG,iBAAO,cAAPA,EAAyC;MAC9C,IAAIC,IAAI,GAAR,CAAA;MAEA,KAAA,eAAA,CAAA,OAAA,CAA6B,UAAA,KAAA,EAAA,GAAA,EAAgB;QAC3C,IAAIH,GAAG,KAAP,cAAA,EAA4B;UAC1BG,IAAI,IAAIF,KAAK,CAAbE,KAAAA;QACD;MAHH,CAAA;MAMA,OAAA,IAAA;IACD;;;WACMC,mCAAkC;MACvC,OAAO,KAAA,eAAA,CAAP,IAAA;IACD;;;WACMC,gCAAiC;MACtC,IAAMC,IAAc,GAApB,EAAA;MAEA,KAAA,eAAA,CAAA,OAAA,CAA6B,UAAA,MAAA,EAAA,GAAA,EAAiB;QAC5CA,IAAI,CAAJA,IAAAA,CAAAA,GAAAA;MADF,CAAA;MAIA,OAAA,IAAA;IACD;;;WAEMC,mBAAuC;MAC5C,OAAO,KAAP,eAAA;IACD;;;WAEMC,wBAAqB;MAC1B,KAAA,eAAA,CAAA,KAAA;IACD;;;WAEaC,6BAAmB,UAAnBA,EAAmB,UAAnBA,EAGH;MACT,OAAOC,UAAU,CAAVA,IAAAA,CAAiBC,UAAAA,SAAD;QAAA,OAAeC,UAAU,CAAVA,QAAAA,CAAtC,SAAsCA,CAAf;MAAA,CAAhBF,CAAP;IACD;;;;;;SAlHY,c","sourcesContent":["import { AdaptedPointerEvent } from '../interfaces';\n\ninterface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\nconst VELOCITY_FACTOR = 0.2;\n\nexport default class PointerTracker {\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  public addToTracker(event: AdaptedPointerEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n  }\n\n  public track(event: AdaptedPointerEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    const dx = event.x - element.lastX;\n    const dy = event.y - element.lastY;\n    const dt = event.time - element.timeStamp;\n\n    element.velocityX = (dx / dt) * 1000 * VELOCITY_FACTOR;\n    element.velocityY = (dy / dt) * 1000 * VELOCITY_FACTOR;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n  public getLastX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.lastX as number;\n  }\n  public getLastY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.lastY as number;\n  }\n  public getLastAvgX(): number {\n    return this.getSumX() / this.trackedPointers.size;\n  }\n  public getLastAvgY(): number {\n    return this.getSumY() / this.trackedPointers.size;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.trackedPointers.clear();\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}