{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { EventTypes, MouseButtons } from \"../interfaces\";\n\nvar EventManager = function () {\n  function EventManager(view) {\n    _classCallCheck(this, EventManager);\n\n    _defineProperty(this, \"activePointers\", []);\n\n    _defineProperty(this, \"view\", void 0);\n\n    this.view = view;\n  }\n\n  _createClass(EventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this = this;\n\n      this.view.addEventListener('pointerdown', function (event) {\n        if (!_this.isPointerInBounds({\n          x: event.clientX,\n          y: event.clientY\n        })) {\n          return;\n        }\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.DOWN);\n\n        var target = event.target;\n        target.setPointerCapture(adaptedEvent.pointerId);\n\n        _this.addActivePointer(adaptedEvent.pointerId);\n\n        _this.onPointerDown(adaptedEvent);\n      });\n      this.view.addEventListener('pointerup', function (event) {\n        var adaptedEvent = _this.mapEvent(event, EventTypes.UP);\n\n        var target = event.target;\n\n        _this.onPointerUp(adaptedEvent);\n\n        target.releasePointerCapture(adaptedEvent.pointerId);\n\n        _this.removeActivePointer(adaptedEvent.pointerId);\n      });\n      this.view.addEventListener('pointermove', function (event) {\n        if (event.pointerType === 'mouse' && event.buttons !== MouseButtons.LEFT) {\n          return;\n        }\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.MOVE);\n\n        var inBounds = _this.isPointerInBounds({\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n\n        var pointerIndex = _this.activePointers.indexOf(adaptedEvent.pointerId);\n\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n\n            _this.onPointerEnter(adaptedEvent);\n\n            _this.addActivePointer(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.OUT;\n\n            _this.onPointerOut(adaptedEvent);\n\n            _this.removeActivePointer(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('pointercancel', function (event) {\n        event.preventDefault();\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.CANCEL);\n\n        _this.onPointerCancel(adaptedEvent);\n      });\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(_event) {}\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(_event) {}\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(_event) {}\n  }, {\n    key: \"onPointerOut\",\n    value: function onPointerOut(_event) {}\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(_event) {}\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(_event) {}\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(_event) {}\n  }, {\n    key: \"setOnPointerDown\",\n    value: function setOnPointerDown(callback) {\n      this.onPointerDown = callback;\n    }\n  }, {\n    key: \"setOnPointerUp\",\n    value: function setOnPointerUp(callback) {\n      this.onPointerUp = callback;\n    }\n  }, {\n    key: \"setOnPointerMove\",\n    value: function setOnPointerMove(callback) {\n      this.onPointerMove = callback;\n    }\n  }, {\n    key: \"setOnPointerOut\",\n    value: function setOnPointerOut(callback) {\n      this.onPointerOut = callback;\n    }\n  }, {\n    key: \"setOnPointerEnter\",\n    value: function setOnPointerEnter(callback) {\n      this.onPointerEnter = callback;\n    }\n  }, {\n    key: \"setOnPointerCancel\",\n    value: function setOnPointerCancel(callback) {\n      this.onPointerCancel = callback;\n    }\n  }, {\n    key: \"setOnPointerOutOfBounds\",\n    value: function setOnPointerOutOfBounds(callback) {\n      this.onPointerOutOfBounds = callback;\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: event.pointerType,\n        buttons: event.buttons,\n        time: event.timeStamp\n      };\n    }\n  }, {\n    key: \"isPointerInBounds\",\n    value: function isPointerInBounds(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      if (!this.view) {\n        return false;\n      }\n\n      var rect = this.view.getBoundingClientRect();\n      return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    }\n  }, {\n    key: \"addActivePointer\",\n    value: function addActivePointer(pointerId) {\n      if (this.activePointers.indexOf(pointerId) >= 0) {\n        return;\n      }\n\n      this.activePointers.push(pointerId);\n    }\n  }, {\n    key: \"removeActivePointer\",\n    value: function removeActivePointer(pointerId) {\n      var index = this.activePointers.indexOf(pointerId);\n\n      if (index < 0) {\n        return;\n      }\n\n      this.activePointers.splice(index, 1);\n    }\n  }]);\n\n  return EventManager;\n}();\n\nexport { EventManager as default };","map":{"version":3,"sources":["EventManager.ts"],"names":["constructor","setListeners","event","x","y","clientY","adaptedEvent","EventTypes","target","MouseButtons","inBounds","pointerIndex","onPointerDown","onPointerUp","onPointerMove","onPointerOut","onPointerEnter","onPointerCancel","onPointerOutOfBounds","setOnPointerDown","setOnPointerUp","setOnPointerMove","setOnPointerOut","setOnPointerEnter","setOnPointerCancel","setOnPointerOutOfBounds","mapEvent","offsetX","offsetY","pointerId","eventType","pointerType","buttons","time","timeStamp","isPointerInBounds","rect","addActivePointer","removeActivePointer","index"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\n\nimport { EventTypes, AdaptedPointerEvent, MouseButtons } from '../interfaces';\n\nexport default class EventManager {\n  private activePointers: number[] = [];\n  private readonly view: HTMLElement;\n\n  constructor(view: HTMLElement) {\n    this.view = view;\n  }\n\n  public setListeners() {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (\n        !this.isPointerInBounds({\n          x: event.clientX,\n          y: event.clientY,\n        })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedPointerEvent = this.mapEvent(\n        event,\n        EventTypes.DOWN\n      );\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.addActivePointer(adaptedEvent.pointerId);\n      this.onPointerDown(adaptedEvent);\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      const adaptedEvent: AdaptedPointerEvent = this.mapEvent(\n        event,\n        EventTypes.UP\n      );\n      const target = event.target as HTMLElement;\n\n      this.onPointerUp(adaptedEvent);\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.removeActivePointer(adaptedEvent.pointerId);\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (\n        event.pointerType === 'mouse' &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedPointerEvent = this.mapEvent(\n        event,\n        EventTypes.MOVE\n      );\n\n      const inBounds: boolean = this.isPointerInBounds({\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.activePointers.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.addActivePointer(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.removeActivePointer(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      event.preventDefault();\n\n      const adaptedEvent: AdaptedPointerEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n    });\n  }\n\n  private onPointerDown(_event: AdaptedPointerEvent): void {}\n  private onPointerUp(_event: AdaptedPointerEvent): void {}\n  private onPointerMove(_event: AdaptedPointerEvent): void {}\n  private onPointerOut(_event: AdaptedPointerEvent): void {}\n  private onPointerEnter(_event: AdaptedPointerEvent): void {}\n  private onPointerCancel(_event: AdaptedPointerEvent): void {}\n  private onPointerOutOfBounds(_event: AdaptedPointerEvent): void {}\n\n  public setOnPointerDown(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerDown = callback;\n  }\n  public setOnPointerUp(callback: (event: AdaptedPointerEvent) => void): void {\n    this.onPointerUp = callback;\n  }\n  public setOnPointerMove(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerMove = callback;\n  }\n  public setOnPointerOut(callback: (event: AdaptedPointerEvent) => void): void {\n    this.onPointerOut = callback;\n  }\n  public setOnPointerEnter(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerEnter = callback;\n  }\n  public setOnPointerCancel(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerCancel = callback;\n  }\n  public setOnPointerOutOfBounds(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerOutOfBounds = callback;\n  }\n\n  private mapEvent(\n    event: PointerEvent,\n    eventType: EventTypes\n  ): AdaptedPointerEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    if (!this.view) {\n      return false;\n    }\n\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return (\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom\n    );\n  }\n\n  private addActivePointer(pointerId: number): void {\n    if (this.activePointers.indexOf(pointerId) >= 0) {\n      return;\n    }\n\n    this.activePointers.push(pointerId);\n  }\n\n  private removeActivePointer(pointerId: number): void {\n    const index: number = this.activePointers.indexOf(pointerId);\n\n    if (index < 0) {\n      return;\n    }\n\n    this.activePointers.splice(index, 1);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}