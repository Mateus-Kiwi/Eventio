{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { State } from \"../../State\";\nimport PointerTracker from \"./PointerTracker\";\n\nvar GestureHandlerOrchestrator = function () {\n  function GestureHandlerOrchestrator() {\n    _classCallCheck(this, GestureHandlerOrchestrator);\n\n    _defineProperty(this, \"gestureHandlers\", []);\n\n    _defineProperty(this, \"awaitingHandlers\", []);\n\n    _defineProperty(this, \"handlersToCancel\", []);\n\n    _defineProperty(this, \"handlingChangeSemaphore\", 0);\n\n    _defineProperty(this, \"activationIndex\", 0);\n  }\n\n  _createClass(GestureHandlerOrchestrator, [{\n    key: \"scheduleFinishedHandlersCleanup\",\n    value: function scheduleFinishedHandlersCleanup() {\n      if (this.handlingChangeSemaphore === 0) {\n        this.cleanupFinishedHandlers();\n      }\n    }\n  }, {\n    key: \"cleanHandler\",\n    value: function cleanHandler(handler) {\n      handler.reset();\n      handler.setActive(false);\n      handler.setAwaiting(false);\n      handler.setActivationIndex(Number.MAX_VALUE);\n    }\n  }, {\n    key: \"cleanupFinishedHandlers\",\n    value: function cleanupFinishedHandlers() {\n      for (var i = this.gestureHandlers.length - 1; i >= 0; --i) {\n        var handler = this.gestureHandlers[i];\n\n        if (!handler) {\n          continue;\n        }\n\n        if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n          this.gestureHandlers.splice(i, 1);\n          this.cleanHandler(handler);\n        }\n      }\n    }\n  }, {\n    key: \"hasOtherHandlerToWaitFor\",\n    value: function hasOtherHandlerToWaitFor(handler) {\n      var _this = this;\n\n      var hasToWait = false;\n      this.gestureHandlers.forEach(function (otherHandler) {\n        if (otherHandler && !_this.isFinished(otherHandler.getState()) && _this.shouldHandlerWaitForOther(handler, otherHandler)) {\n          hasToWait = true;\n          return;\n        }\n      });\n      return hasToWait;\n    }\n  }, {\n    key: \"tryActivate\",\n    value: function tryActivate(handler, event) {\n      if (this.hasOtherHandlerToWaitFor(handler)) {\n        this.addAwaitingHandler(handler);\n      } else {\n        this.makeActive(handler, event);\n      }\n    }\n  }, {\n    key: \"cleanupAwaitingHandlers\",\n    value: function cleanupAwaitingHandlers(handler) {\n      for (var i = 0; i < this.awaitingHandlers.length; ++i) {\n        if (!this.awaitingHandlers[i].isAwaiting() && this.shouldHandlerWaitForOther(this.awaitingHandlers[i], handler)) {\n          this.cleanHandler(this.awaitingHandlers[i]);\n          this.awaitingHandlers.splice(i, 1);\n        }\n      }\n    }\n  }, {\n    key: \"onHandlerStateChange\",\n    value: function onHandlerStateChange(handler, newState, oldState, event) {\n      var _this2 = this;\n\n      this.handlingChangeSemaphore += 1;\n\n      if (this.isFinished(newState)) {\n        this.awaitingHandlers.forEach(function (otherHandler) {\n          if (_this2.shouldHandlerWaitForOther(otherHandler, handler)) {\n            if (newState === State.END) {\n              otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.cancel(event);\n              otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.setAwaiting(false);\n            } else {\n              _this2.tryActivate(otherHandler, event);\n            }\n          }\n        });\n      }\n\n      if (newState === State.ACTIVE) {\n        this.tryActivate(handler, event);\n      } else if (oldState === State.ACTIVE || oldState === State.END) {\n        if (handler.isActive()) {\n          handler.sendEvent(event, newState, oldState);\n        } else if (oldState === State.ACTIVE) {\n          handler.sendEvent(event, newState, State.BEGAN);\n        }\n      } else if (oldState !== State.UNDETERMINED || newState !== State.CANCELLED) {\n        handler.sendEvent(event, newState, oldState);\n      }\n\n      this.handlingChangeSemaphore -= 1;\n      this.scheduleFinishedHandlersCleanup();\n\n      if (this.awaitingHandlers.indexOf(handler) < 0) {\n        this.cleanupAwaitingHandlers(handler);\n      }\n    }\n  }, {\n    key: \"makeActive\",\n    value: function makeActive(handler, event) {\n      var _this3 = this;\n\n      var currentState = handler.getState();\n      handler.setActive(true);\n      handler.setShouldResetProgress(true);\n      handler.setActivationIndex(this.activationIndex++);\n      this.gestureHandlers.forEach(function (otherHandler) {\n        if (_this3.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n          _this3.handlersToCancel.push(otherHandler);\n        }\n      });\n\n      for (var i = this.handlersToCancel.length - 1; i >= 0; --i) {\n        var _this$handlersToCance;\n\n        (_this$handlersToCance = this.handlersToCancel[i]) === null || _this$handlersToCance === void 0 ? void 0 : _this$handlersToCance.cancel(event);\n      }\n\n      this.awaitingHandlers.forEach(function (otherHandler) {\n        if (_this3.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n          otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.cancel(event);\n          otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.setAwaiting(true);\n        }\n      });\n      handler.sendEvent(event, State.ACTIVE, State.BEGAN);\n\n      if (currentState !== State.ACTIVE) {\n        handler.sendEvent(event, State.END, State.ACTIVE);\n\n        if (currentState !== State.END) {\n          handler.sendEvent(event, State.UNDETERMINED, State.END);\n        }\n      }\n\n      if (handler.isAwaiting()) {\n        handler.setAwaiting(false);\n        handler.end(event);\n      }\n\n      this.handlersToCancel = [];\n    }\n  }, {\n    key: \"addAwaitingHandler\",\n    value: function addAwaitingHandler(handler) {\n      var alreadyExists = false;\n      this.awaitingHandlers.forEach(function (otherHandler) {\n        if (otherHandler === handler) {\n          alreadyExists = true;\n          return;\n        }\n      });\n\n      if (alreadyExists) {\n        return;\n      }\n\n      this.awaitingHandlers.push(handler);\n      handler.setAwaiting(true);\n      handler.setActivationIndex(this.activationIndex++);\n    }\n  }, {\n    key: \"recordHandlerIfNotPresent\",\n    value: function recordHandlerIfNotPresent(handler) {\n      var alreadyExists = false;\n      this.gestureHandlers.forEach(function (otherHandler) {\n        if (otherHandler === handler) {\n          alreadyExists = true;\n          return;\n        }\n      });\n\n      if (alreadyExists) {\n        return;\n      }\n\n      this.gestureHandlers.push(handler);\n      handler.setActive(false);\n      handler.setAwaiting(false);\n      handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n    }\n  }, {\n    key: \"shouldHandlerWaitForOther\",\n    value: function shouldHandlerWaitForOther(handler, otherHandler) {\n      return handler !== otherHandler && (handler.shouldWaitForHandlerFailure(otherHandler) || otherHandler.shouldRequireToWaitForFailure(handler));\n    }\n  }, {\n    key: \"canRunSimultaneously\",\n    value: function canRunSimultaneously(gh1, gh2) {\n      return gh1 === gh2 || gh1.shouldRecognizeSimultaneously(gh2) || gh2.shouldRecognizeSimultaneously(gh1);\n    }\n  }, {\n    key: \"shouldHandlerBeCancelledBy\",\n    value: function shouldHandlerBeCancelledBy(handler, otherHandler) {\n      var handlerPointers = handler.getTrackedPointersID();\n      var otherPointers = otherHandler.getTrackedPointersID();\n\n      if (!PointerTracker.shareCommonPointers(handlerPointers, otherPointers) && handler.getView() !== otherHandler.getView()) {\n        return this.checkOverlap(handler, otherHandler);\n      }\n\n      if (this.canRunSimultaneously(handler, otherHandler)) {\n        return false;\n      }\n\n      if (handler !== otherHandler && (handler.isAwaiting() || handler.getState() === State.ACTIVE)) {\n        return handler.shouldBeCancelledByOther(otherHandler);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(handler, otherHandler) {\n      var handlerPointers = handler.getTrackedPointersID();\n      var otherPointers = otherHandler.getTrackedPointersID();\n      var overlap = false;\n      handlerPointers.forEach(function (pointer) {\n        var handlerX = handler.getTracker().getLastX(pointer);\n        var handlerY = handler.getTracker().getLastY(pointer);\n\n        if (handler.getEventManager().isPointerInBounds({\n          x: handlerX,\n          y: handlerY\n        }) && otherHandler.getEventManager().isPointerInBounds({\n          x: handlerX,\n          y: handlerY\n        })) {\n          overlap = true;\n        }\n      });\n      otherPointers.forEach(function (pointer) {\n        var otherX = otherHandler.getTracker().getLastX(pointer);\n        var otherY = otherHandler.getTracker().getLastY(pointer);\n\n        if (handler.getEventManager().isPointerInBounds({\n          x: otherX,\n          y: otherY\n        }) && otherHandler.getEventManager().isPointerInBounds({\n          x: otherX,\n          y: otherY\n        })) {\n          overlap = true;\n        }\n      });\n      return overlap;\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished(state) {\n      return state === State.END || state === State.FAILED || state === State.CANCELLED;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!GestureHandlerOrchestrator.instance) GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n      return GestureHandlerOrchestrator.instance;\n    }\n  }]);\n\n  return GestureHandlerOrchestrator;\n}();\n\nexport { GestureHandlerOrchestrator as default };\n\n_defineProperty(GestureHandlerOrchestrator, \"instance\", void 0);","map":{"version":3,"sources":["GestureHandlerOrchestrator.ts"],"names":["GestureHandlerOrchestrator","constructor","scheduleFinishedHandlersCleanup","cleanHandler","handler","Number","cleanupFinishedHandlers","i","hasOtherHandlerToWaitFor","hasToWait","otherHandler","tryActivate","cleanupAwaitingHandlers","onHandlerStateChange","newState","State","oldState","makeActive","currentState","addAwaitingHandler","alreadyExists","recordHandlerIfNotPresent","shouldHandlerWaitForOther","canRunSimultaneously","gh1","gh2","shouldHandlerBeCancelledBy","handlerPointers","otherPointers","PointerTracker","checkOverlap","overlap","pointer","handlerX","handlerY","x","y","otherX","otherY","isFinished","state","getInstance"],"mappings":"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","sourcesContent":["import { State } from '../../State';\nimport { AdaptedPointerEvent } from '../interfaces';\n\nimport GestureHandler from '../handlers/GestureHandler';\nimport PointerTracker from './PointerTracker';\n\nexport default class GestureHandlerOrchestrator {\n  private static instance: GestureHandlerOrchestrator;\n\n  private gestureHandlers: GestureHandler[] = [];\n  private awaitingHandlers: GestureHandler[] = [];\n  private handlersToCancel: GestureHandler[] = [];\n\n  private handlingChangeSemaphore = 0;\n  private activationIndex = 0;\n\n  // Private beacuse of Singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private scheduleFinishedHandlersCleanup(): void {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n\n  private cleanHandler(handler: GestureHandler): void {\n    handler.reset();\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_VALUE);\n  }\n\n  private cleanupFinishedHandlers(): void {\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n      if (!handler) {\n        continue;\n      }\n\n      if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n        this.gestureHandlers.splice(i, 1);\n\n        this.cleanHandler(handler);\n      }\n    }\n  }\n\n  private hasOtherHandlerToWaitFor(handler: GestureHandler): boolean {\n    let hasToWait = false;\n    this.gestureHandlers.forEach((otherHandler) => {\n      if (\n        otherHandler &&\n        !this.isFinished(otherHandler.getState()) &&\n        this.shouldHandlerWaitForOther(handler, otherHandler)\n      ) {\n        hasToWait = true;\n        return;\n      }\n    });\n\n    return hasToWait;\n  }\n\n  private tryActivate(\n    handler: GestureHandler,\n    event: AdaptedPointerEvent\n  ): void {\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n    } else {\n      this.makeActive(handler, event);\n    }\n  }\n\n  private cleanupAwaitingHandlers(handler: GestureHandler): void {\n    for (let i = 0; i < this.awaitingHandlers.length; ++i) {\n      if (\n        !this.awaitingHandlers[i].isAwaiting() &&\n        this.shouldHandlerWaitForOther(this.awaitingHandlers[i], handler)\n      ) {\n        this.cleanHandler(this.awaitingHandlers[i]);\n        this.awaitingHandlers.splice(i, 1);\n      }\n    }\n  }\n\n  public onHandlerStateChange(\n    handler: GestureHandler,\n    newState: State,\n    oldState: State,\n    event: AdaptedPointerEvent\n  ): void {\n    this.handlingChangeSemaphore += 1;\n\n    if (this.isFinished(newState)) {\n      this.awaitingHandlers.forEach((otherHandler) => {\n        if (this.shouldHandlerWaitForOther(otherHandler, handler)) {\n          if (newState === State.END) {\n            otherHandler?.cancel(event);\n            otherHandler?.setAwaiting(false);\n          } else {\n            this.tryActivate(otherHandler, event);\n          }\n        }\n      });\n    }\n\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler, event);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.isActive()) {\n        handler.sendEvent(event, newState, oldState);\n      } else if (oldState === State.ACTIVE) {\n        handler.sendEvent(event, newState, State.BEGAN);\n      }\n    } else if (\n      oldState !== State.UNDETERMINED ||\n      newState !== State.CANCELLED\n    ) {\n      handler.sendEvent(event, newState, oldState);\n    }\n\n    this.handlingChangeSemaphore -= 1;\n\n    this.scheduleFinishedHandlersCleanup();\n\n    if (this.awaitingHandlers.indexOf(handler) < 0) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n\n  private makeActive(\n    handler: GestureHandler,\n    event: AdaptedPointerEvent\n  ): void {\n    const currentState = handler.getState();\n\n    handler.setActive(true);\n    handler.setShouldResetProgress(true);\n    handler.setActivationIndex(this.activationIndex++);\n\n    this.gestureHandlers.forEach((otherHandler) => {\n      // Order of arguments is correct - we check whether current handler should cancel existing handlers\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        this.handlersToCancel.push(otherHandler);\n      }\n    });\n\n    for (let i = this.handlersToCancel.length - 1; i >= 0; --i) {\n      this.handlersToCancel[i]?.cancel(event);\n    }\n    this.awaitingHandlers.forEach((otherHandler) => {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler?.cancel(event);\n        otherHandler?.setAwaiting(true);\n      }\n    });\n\n    handler.sendEvent(event, State.ACTIVE, State.BEGAN);\n\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(event, State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(event, State.UNDETERMINED, State.END);\n      }\n    }\n\n    if (handler.isAwaiting()) {\n      handler.setAwaiting(false);\n      handler.end(event);\n    }\n\n    this.handlersToCancel = [];\n  }\n\n  private addAwaitingHandler(handler: GestureHandler): void {\n    let alreadyExists = false;\n\n    this.awaitingHandlers.forEach((otherHandler) => {\n      if (otherHandler === handler) {\n        alreadyExists = true;\n        return;\n      }\n    });\n\n    if (alreadyExists) {\n      return;\n    }\n\n    this.awaitingHandlers.push(handler);\n\n    handler.setAwaiting(true);\n    handler.setActivationIndex(this.activationIndex++);\n  }\n\n  public recordHandlerIfNotPresent(handler: GestureHandler): void {\n    let alreadyExists = false;\n\n    this.gestureHandlers.forEach((otherHandler) => {\n      if (otherHandler === handler) {\n        alreadyExists = true;\n        return;\n      }\n    });\n\n    if (alreadyExists) {\n      return;\n    }\n\n    this.gestureHandlers.push(handler);\n\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n  }\n\n  private shouldHandlerWaitForOther(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    return (\n      handler !== otherHandler &&\n      (handler.shouldWaitForHandlerFailure(otherHandler) ||\n        otherHandler.shouldRequireToWaitForFailure(handler))\n    );\n  }\n\n  private canRunSimultaneously(\n    gh1: GestureHandler,\n    gh2: GestureHandler\n  ): boolean {\n    return (\n      gh1 === gh2 ||\n      gh1.shouldRecognizeSimultaneously(gh2) ||\n      gh2.shouldRecognizeSimultaneously(gh1)\n    );\n  }\n\n  private shouldHandlerBeCancelledBy(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    if (\n      !PointerTracker.shareCommonPointers(handlerPointers, otherPointers) &&\n      handler.getView() !== otherHandler.getView()\n    ) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n\n    if (\n      handler !== otherHandler &&\n      (handler.isAwaiting() || handler.getState() === State.ACTIVE)\n    ) {\n      // For now it always returns false\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n\n    return true;\n  }\n\n  private checkOverlap(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    // If handlers don't have common pointers, default return value is false.\n    // However, if at least on pointer overlaps with both handlers, we return true\n    // This solves issue in overlapping parents example\n\n    // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    let overlap = false;\n\n    handlerPointers.forEach((pointer: number) => {\n      const handlerX: number = handler.getTracker().getLastX(pointer);\n      const handlerY: number = handler.getTracker().getLastY(pointer);\n\n      if (\n        handler\n          .getEventManager()\n          .isPointerInBounds({ x: handlerX, y: handlerY }) &&\n        otherHandler\n          .getEventManager()\n          .isPointerInBounds({ x: handlerX, y: handlerY })\n      ) {\n        overlap = true;\n      }\n    });\n\n    otherPointers.forEach((pointer: number) => {\n      const otherX: number = otherHandler.getTracker().getLastX(pointer);\n      const otherY: number = otherHandler.getTracker().getLastY(pointer);\n\n      if (\n        handler.getEventManager().isPointerInBounds({ x: otherX, y: otherY }) &&\n        otherHandler\n          .getEventManager()\n          .isPointerInBounds({ x: otherX, y: otherY })\n      ) {\n        overlap = true;\n      }\n    });\n\n    return overlap;\n  }\n\n  private isFinished(state: State): boolean {\n    return (\n      state === State.END || state === State.FAILED || state === State.CANCELLED\n    );\n  }\n\n  public static getInstance(): GestureHandlerOrchestrator {\n    if (!GestureHandlerOrchestrator.instance)\n      GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n\n    return GestureHandlerOrchestrator.instance;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}