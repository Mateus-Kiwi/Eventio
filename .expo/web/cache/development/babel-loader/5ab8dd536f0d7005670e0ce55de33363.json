{"ast":null,"code":"import InteractionManager from \"./web/tools/InteractionManager\";\nimport NodeManager from \"./web/tools/NodeManager\";\nimport PanGestureHandler from \"./web/handlers/PanGestureHandler\";\nimport TapGestureHandler from \"./web/handlers/TapGestureHandler\";\nimport LongPressGestureHandler from \"./web/handlers/LongPressGestureHandler\";\nimport PinchGestureHandler from \"./web/handlers/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/handlers/RotationGestureHandler\";\nimport FlingGestureHandler from \"./web/handlers/FlingGestureHandler\";\nimport NativeViewGestureHandler from \"./web/handlers/NativeViewGestureHandler\";\nimport * as HammerNodeManager from \"./web_hammer/NodeManager\";\nimport HammerNativeViewGestureHandler from \"./web_hammer/NativeViewGestureHandler\";\nimport HammerPanGestureHandler from \"./web_hammer/PanGestureHandler\";\nimport HammerTapGestureHandler from \"./web_hammer/TapGestureHandler\";\nimport HammerLongPressGestureHandler from \"./web_hammer/LongPressGestureHandler\";\nimport HammerPinchGestureHandler from \"./web_hammer/PinchGestureHandler\";\nimport HammerRotationGestureHandler from \"./web_hammer/RotationGestureHandler\";\nimport HammerFlingGestureHandler from \"./web_hammer/FlingGestureHandler\";\nimport { isExperimentalWebImplementationEnabled } from \"./EnableExperimentalWebImplementation\";\nexport var Gestures = {\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  PanGestureHandler: PanGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  FlingGestureHandler: FlingGestureHandler\n};\nexport var HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler\n};\nvar interactionManager = new InteractionManager();\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      interactionManager.configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      interactionManager.configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","NativeViewGestureHandler","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","HammerGestures","HammerFlingGestureHandler","interactionManager","handleSetJSResponder","console","handleClearJSResponder","createGestureHandler","isExperimentalWebImplementationEnabled","handlerName","GestureClass","NodeManager","HammerNodeManager","attachGestureHandler","updateGestureHandler","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"AAGA,OAAA,kBAAA;AACA,OAAA,WAAA;AACA,OAAA,iBAAA;AACA,OAAA,iBAAA;AACA,OAAA,uBAAA;AACA,OAAA,mBAAA;AACA,OAAA,sBAAA;AACA,OAAA,mBAAA;AACA,OAAA,wBAAA;AAGA,OAAO,KAAP,iBAAA;AACA,OAAA,8BAAA;AACA,OAAA,uBAAA;AACA,OAAA,uBAAA;AACA,OAAA,6BAAA;AACA,OAAA,yBAAA;AACA,OAAA,4BAAA;AACA,OAAA,yBAAA;AAEA,SAAA,sCAAA;AAEA,OAAO,IAAMA,QAAQ,GAAG;EACtBC,wBADsB,EACtBA,wBADsB;EAEtBC,iBAFsB,EAEtBA,iBAFsB;EAGtBC,iBAHsB,EAGtBA,iBAHsB;EAItBC,uBAJsB,EAItBA,uBAJsB;EAKtBC,mBALsB,EAKtBA,mBALsB;EAMtBC,sBANsB,EAMtBA,sBANsB;EAOtBC,mBAAAA,EAAAA;AAPsB,CAAjB;AAUP,OAAO,IAAMC,cAAc,GAAG;EAC5BP,wBAAwB,EADI,8BAAA;EAE5BC,iBAAiB,EAFW,uBAAA;EAG5BC,iBAAiB,EAHW,uBAAA;EAI5BC,uBAAuB,EAJK,6BAAA;EAK5BC,mBAAmB,EALS,yBAAA;EAM5BC,sBAAsB,EANM,4BAAA;EAO5BC,mBAAmB,EAAEE;AAPO,CAAvB;AAUP,IAAMC,kBAAkB,GAAG,IAA3B,kBAA2B,EAA3B;AAEA,eAAe;EAEbC,oBAFa,gCAEO,GAFP,EAEO,oBAFP,EAEoD;IAC/DC,OAAO,CAAPA,IAAAA,CAAAA,wBAAAA,EAAAA,GAAAA,EAAAA,oBAAAA;EAHW,CAAA;EAKbC,sBALa,oCAKY;IACvBD,OAAO,CAAPA,IAAAA,CAAAA,0BAAAA;EANW,CAAA;EAQbE,oBARa,gCAQO,WARP,EAQO,UARP,EAQO,MARP,EAYX;IACA,IAAIC,sCAAJ,EAAA,EAA8C;MAC5C,IAAI,EAAEC,WAAW,IAAjB,QAAI,CAAJ,EAAgC;QAC9B,MAAM,IAAA,KAAA,oCAAN,WAAM,+BAAN;MAGD;;MAED,IAAMC,YAAY,GAAGjB,QAAQ,CAA7B,WAA6B,CAA7B;MACAkB,WAAW,CAAXA,oBAAAA,CAAAA,UAAAA,EAA6C,IAA7CA,YAA6C,EAA7CA;MACAR,kBAAkB,CAAlBA,qBAAAA,CACEQ,WAAW,CAAXA,UAAAA,CADFR,UACEQ,CADFR,EAAAA,MAAAA;IATF,CAAA,MAaO;MACL,IAAI,EAAEM,WAAW,IAAjB,cAAI,CAAJ,EAAsC;QACpC,MAAM,IAAA,KAAA,oCAAN,WAAM,+BAAN;MAGD;;MAED,IAAMC,aAAY,GAAGT,cAAc,CAAnC,WAAmC,CAAnC;MACAW,iBAAiB,CAAjBA,oBAAAA,CAAAA,UAAAA,EAAmD,IAAnDA,aAAmD,EAAnDA;IACD;;IAED,KAAA,oBAAA,CAAA,UAAA,EAAA,MAAA;EArCW,CAAA;EAuCbC,oBAvCa,gCAuCO,UAvCP,EAuCO,OAvCP,EAuCO,WAvCP,EAuCO,QAvCP,EA4CX;IACA,IAAIL,sCAAJ,EAAA,EAA8C;MAC5CG,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,IAAAA,CAAAA,OAAAA,EAAAA,QAAAA;IADF,CAAA,MAEO;MACLC,iBAAiB,CAAjBA,UAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA,OAAAA,EAAAA,QAAAA;IACD;EAjDU,CAAA;EAmDbE,oBAnDa,gCAmDO,UAnDP,EAmDO,SAnDP,EAmD+C;IAC1D,IAAIN,sCAAJ,EAAA,EAA8C;MAC5CG,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,mBAAAA,CAAAA,SAAAA;MAEAR,kBAAkB,CAAlBA,qBAAAA,CACEQ,WAAW,CAAXA,UAAAA,CADFR,UACEQ,CADFR,EAAAA,SAAAA;IAHF,CAAA,MAOO;MACLS,iBAAiB,CAAjBA,UAAAA,CAAAA,UAAAA,EAAAA,mBAAAA,CAAAA,SAAAA;IACD;EA7DU,CAAA;EA+DbG,qBA/Da,iCA+DQ,UA/DR,EA+D6B;IACxC,IAAIP,sCAAJ,EAAA,EAA8C;MAC5C,OAAOG,WAAW,CAAXA,UAAAA,CAAP,UAAOA,CAAP;IADF,CAAA,MAEO;MACL,OAAOC,iBAAiB,CAAjBA,UAAAA,CAAP,UAAOA,CAAP;IACD;EApEU,CAAA;EAsEbI,kBAtEa,8BAsEK,UAtEL,EAsE0B;IACrC,IAAIR,sCAAJ,EAAA,EAA8C;MAC5CG,WAAW,CAAXA,kBAAAA,CAAAA,UAAAA;IADF,CAAA,MAEO;MACLC,iBAAiB,CAAjBA,kBAAAA,CAAAA,UAAAA;IACD;EA3EU,CAAA;EA8EbK,eA9Ea,6BA8EK,CAAE;AA9EP,CAAf","sourcesContent":["import { ActionType } from './ActionType';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nconst interactionManager = new InteractionManager();\n\nexport default {\n  // Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        (config as unknown) as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, (config as unknown) as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}